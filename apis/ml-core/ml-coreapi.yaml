openapi: 3.0.1
info:
  title: Kendra Service API(s)
  termsOfService: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
  description: >-
    - The Kendra Service is a centralised Service to support other services. Apis perform operations related to program entities user solutions etc 
    
    - The URL for Kendra API(s) is `kendra/api`

    - <b>Note:</b> These resources can be used in other services 
  contact: {}
  version: '1.0'
servers:
- url: https://staging.open-sunbird.org/kendra/api
  variables: {}
paths: 
  /v1/users/create:
    post:
      tags:
      - User APIs
      summary: Create User
      description: This API is used to create a user
           - The endpoint for **Create User V1** is `/v1/users/create`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Create User
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestBody"
      responses:
        200:
          description: "User Create Successful Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
              example:
                status: true
                message: User created successfully
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/users/isSystemAdmin:
    post:
      summary: check if user is system admin or not
      description: This API is used to check if user is system admin or not
           - The endpoint for **isSystemAdmin User V1** is `/v1/users/isSystemAdmin`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the email of the user to be checked
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IsSystemAdminRequest"
      responses:
        200:
          description: "User Admin Check Successful Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsSystemAdminResponse'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/users/privatePrograms/{userId}:
    post:
      summary: list of user private programs
      description: This API is used to get list of user private programs
           - The endpoint for **privatePrograms User V1** is `/v1/users/isSystemAdmin`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "User Admin Check Successful Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateProgramsList'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorUserIdMissing'
      deprecated: false
      security:
        - bearer: []
  /v1/users/createProgram/{userId}:
    post:
      summary: Users created program and solution
      description: This API is used to get list of user private programs
           - The endpoint for **createProgram User V1** is `/v1/users/createProgram`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
        - name: programId
          in: query
          description: program Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProgramRequestData"
      responses:
        200:
          description: "Users created program and solution Successfull Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProgramResponse'
      deprecated: false
      security:
        - bearer: []
  /v1/users/entitiesMappingForm/{stateId}/:
    get:
      summary: Entities mapping form
      description: This API is used to get entities mapping form
           - The endpoint for **entitiesMappingForm User V1** is `/v1/users/entitiesMappingForm`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: stateId
          in: path
          description: state Id
          required: true
          schema:
            type: string
        - name: roleId
          in: query
          description: role Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Entities mapping form Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entitiesMappingForm'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorForEntitiesMappingForm'
      deprecated: false
      security:
        - bearer: []
  /v1/users/getUserOrganisationsAndRootOrganisations:
    get:
      summary: Get organisation and root organisation
      description: This API is used to get organisation and root organisation
           - The endpoint for **getUserOrganisationsAndRootOrganisations User V1** is `/v1/users/getUserOrganisationsAndRootOrganisations`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Entities mapping form Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserOrganisationsAndRootOrganisations'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/users/search:
    get:
      summary: User Search
      description: This API is used to search user
           - The endpoint for **search User V1** is `/v1/users/search`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - in: query
          name: userName
          description: userName of user
          schema:
            type: string
      responses:
        200:
          description: "User Search Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userSearchResponse"
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/users/solutions/{programId}:
    post:
      summary: User targeted solutions.
      description: This API is used to get user targeted solutions
           - The endpoint for **solutions User V1** is `/v1/users/solutions`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      operationId: User targeted solutions
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: internal-access-token
          in: header
          description: Represents the authorized internal token.
          required: true
          schema:
            type: string
        - in: path
          name: programId
          required: true
          description: program Id 
          schema:
            type: string
        - name: page
          in: query
          description: page
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: string
        - name: search
          in: query
          description: search value
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSolutionsRequest"
      responses:
        200:
          description: "Program solutions Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userSolutionsResponse"
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userSolutions400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/users/programs:
    post:
      summary: List of targeted user programs 
      description: This API is used to get list of targeted user programs
           - The endpoint for **programs User V1** is `/v1/users/programs`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      operationId: List of targeted user programs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: internal-access-token
          in: header
          description: Represents the authorized internal token.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          schema:
            type: string
        - name: search
          in: query
          description: search value
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSolutionsRequest"
      responses:
        200:
          description: "Program Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userProgramResponse"
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/users/entityTypesByLocationAndRole/{stateLocationId}:
    get:
      summary: List of entity type by location and role
      description: This API is used to get list of entity type by location and role
           - The endpoint for **entityTypesByLocationAndRole User V1** is `/v1/users/entityTypesByLocationAndRole`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      operationId: List of entity type by location and role
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - in: path
          name: stateLocationId
          required: true
          description: state Location Id 
          schema:
            type: string
        - name: role
          in: query
          description: role
          schema:
            type: string
      responses:
        200:
          description: "Entity types Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityTypesByLocationAndRoleResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityTypesByLocationAndRole400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/users/targetedEntity/{solutionId}:
    post:
      summary: Targeted entity
      description: This API is used to get Targeted entity
           - The endpoint for **targetedEntity User V1** is `/v1/users/targetedEntity`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User APIs
      operationId: targetedEntity
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: internal-access-token
          in: header
          description: Represents the authorized internal token.
          required: true
          schema:
            type: string
        - in: path
          name: solutionId
          description: solution Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSolutionsRequest"
      responses:
        200:
          description: "Targeted entity Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TargetedEntityResponse"
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/solutionIdMissing400Error'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-roles/list:
    post:
      summary: Lists user roles
      description: This API is used to get list of user roles
           - The endpoint for **list User roles V1** is `/v1/user-roles/list`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Roles APIs
      operationId: Lists user roles.
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userRoleListRequest"
      responses:
        200:
          description: "user roles Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userRoleListResponse"
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/user-profile/getForm:
    get:
      summary: getForm return user profile form
      description: This API is used to get user profile form
           - The endpoint for **getForm user profile V1** is `/v1/user-profile/getForm`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Profile APIs
      operationId: getForm return user profile form
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: appname
          in: header
          description: App Name
          required: true
          schema:
            type: string
        - name: os
          in: header
          description: OS.
          required: true
          schema:
            type: string
      responses:
        200:
          description: "User Profile form Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFormResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getForm400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-profile/save:
    post:
      summary: save's the user profile data
      description: This API is used to save's the user profile data
           - The endpoint for **save user profile V1** is `/v1/user-profile/save`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Profile APIs
      operationId: save's the user profile data
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userProfileSaveRequest"
      responses:
        200:
          description: "save the user profile data Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProfileSaveResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getForm400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/static-links/list:
    get:
      summary: List static links
      description: This API is used to get static links
           - The endpoint for **list static links V1** is `/v1/static-links/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Static Links APIs
      operationId: List static links
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: appname
          in: header
          description: App Name
          required: true
          schema:
            type: string
        - name: apptype
          in: header
          description: App type .
          required: true
          schema:
            type: string
      responses:
        200:
          description: "List static links Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staticLinkListResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getForm400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/static-links/bulkCreate:
    post:
      summary: Upload Static Links Information CSV
      description: This API is used to upload static links information CSV
           - The endpoint for **bulkCreate static links V1** is `/v1/static-links/bulkCreate`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Static Links APIs
      operationId: Upload Static Links Information CSV
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                staticLinks:
                  type: string
                  format: base64
      responses:
        200:
          description: "return CSV file"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  staticLinks:
                    type: string
                    format: base64
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/static-links/bulkUpdate:
    post:
      summary: Upload Static Links Information CSV
      description: This API is used to upload static links information CSV
           - The endpoint for **bulkUpdate static links V1** is `/v1/static-links/bulkUpdate`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Static Links APIs
      operationId: Upload Static Links Information CSV (update)
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                staticLinks:
                  type: string
                  format: base64
      responses:
        200:
          description: "return CSV file"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  staticLinks:
                    type: string
                    format: base64
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entity-types/list:
    get:
      summary: Lists of entity types
      description: This API is used to get lists of entity types.
           - The endpoint for **list Entity type V1** is `/v1/entity-types/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entity Types APIs
      operationId: Lists of entity types.
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Lists of entity types Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityTypesListResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/apps/details/{appName}:
    get:
      summary: Get app details
      description: This API is used to get app details.
           - The endpoint for **details apps V1** is `/v1/apps/details/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Apps APIs
      operationId: Get app details
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: appName
          in: path
          description: app Name
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get app details Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appDetailsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appDetails400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/apps/create:
    post:
      summary: Create an app
      description: This API is used to create an app.
           - The endpoint for **create App V1** is `/v1/apps/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Apps APIs
      operationId: Create an app
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createAppRequest"
      responses:
        200:
          description: "Create an app Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createAppResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createApp400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/apps/update/{name}:
    post:
      summary: Update app details
      description: This API is used to update app details.
           - The endpoint for **update App V1** is `/v1/apps/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Apps APIs
      operationId: Update app details
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: app Name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateAppRequest"
      responses:
        200:
          description: "Update app details Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateAppResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createApp400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/organisations/list:
    get:
      summary: List of all organisations
      description: This API is used to get list of all organisations
           - The endpoint for **list organisations V1** is `/v1/organisations/list`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Organisations APIs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Organisations lists Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organisationsListResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/platform-user-roles/getProfile:
    post:
      summary: Get platform user profile information
      description: This API is used to get platform user profile information
           - The endpoint for **list platform user profile V1** is `/v1/platform-user-roles/getProfile`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - PlatformUserRoles APIs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Platform user profile details Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platformUserRolesGetProfileResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/create:
    post:
      summary: Create solution
      description: This API is used to create solution
           - The endpoint for **create Solution V1** is `/v1/solutions/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: Create solution
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createSolutionRequest"
      responses:
        200:
          description: "Create solution Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSolutionResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSolution400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/update/{solutionId}:
    post:
      summary: Update solution
      description: This API is used to update solution
           - The endpoint for **update Solution V1** is `/v1/solutions/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: Update solution
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: solutionId
          in: path
          description: solution Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createSolutionRequest"
      responses:
        200:
          description: "Update solution Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateSolutionResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSolution400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/list:
    post:
      summary: List solutions
      description: This API is used to list solutions
           - The endpoint for **list Solution V1** is `/v1/solutions/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: List solutions
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: type
          schema:
            type: string
          example: assessment
        - name: subType
          in: query
          description: subType
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: string
          example: 1
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: string
          example: 5
        - name: search
          in: query
          description: search
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/listSolutionRequest"
      responses:
        200:
          description: "List solutions Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listSolutionResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/forUserRoleAndLocation:
    post:
      summary: Auto targeted solution
      description: This API is used to get auto targeted solutions
           - The endpoint for **forUserRoleAndLocation Solution V1** is `/v1/solutions/forUserRoleAndLocation`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: Auto targeted solution
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: programId
          in: query
          description: program Id
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: type
          schema:
            type: string
          example: assessment
        - name: subType
          in: query
          description: subType
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: string
          example: 1
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: string
          example: 5
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forUserRoleAndLocationRequest"
      responses:
        200:
          description: "Auto targeted solution Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forUserRoleAndLocationResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/detailsBasedOnRoleAndLocation/{solutionId}:
    post:
      summary: Targeted solution details
      description: This API is used to get solution details based on role and location.
           - The endpoint for **detailsBasedOnRoleAndLocation Solution V1** is `/v1/solutions/detailsBasedOnRoleAndLocation`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: Targeted solution details
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: solutionId
          in: path
          description: solution Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSolutionsRequest"
      responses:
        200:
          description: "Targeted solution details Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/detailsBasedOnRoleAndLocationResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/solutionIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/addRolesInScope/{solutionId}:
    post:
      summary: Add roles in solutions
      description: This API is used to add roles in solutions
           - The endpoint for **addRolesInScope Solution V1** is `/v1/solutions/addRolesInScope`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: Add roles in solutions
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: solutionId
          in: path
          description: solution Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addRolesInScopeRequest"
      responses:
        200:
          description: "Add roles in solutions Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addRolesInScopeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/solutionIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/addEntitiesInScope/{solutionId}:
    post:
      summary: Add entities in solutions
      description: This API is used to add entities in solutions
           - The endpoint for **addEntitiesInScope Solution V1** is `/v1/solutions/addEntitiesInScope`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: Add entities in solutions
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: solutionId
          in: path
          description: solution Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addEntitiesInScopeRequest"
      responses:
        200:
          description: "Add entities in solutions Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addEntitiesInScopeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/solutionIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/removeRolesInScope/{solutionId}:
    post:
      summary: Remove roles from solutions scope
      description: This API is used to remove roles from solutions scope
           - The endpoint for **removeRolesInScope Solution V1** is `/v1/solutions/removeRolesInScope`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: Remove roles from solutions scope
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: solutionId
          in: path
          description: solution Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addRolesInScopeRequest"
      responses:
        200:
          description: "Remove roles from solutions scope Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/removeRolesInScopeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/solutionIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/removeEntitiesInScope/{solutionId}:
    post:
      summary: Remove entities from solution scope
      description: This API is used to remove entities from solution scope
           - The endpoint for **removeEntitiesInScope Solution V1** is `/v1/solutions/removeEntitiesInScope`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: Remove entities from solution scope
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: solutionId
          in: path
          description: solution Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addEntitiesInScopeRequest"
      responses:
        200:
          description: "Remove entities from solution scope Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/removeEntitiesInScopeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/solutionIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/targetedSolutions:
    post:
      summary: List of assigned solutions and targetted ones
      description: This API is used to get List of assigned solutions and targetted ones
           - The endpoint for **targetedSolutions Solution V1** is `/v1/solutions/targetedSolutions`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Solutions APIs
      operationId: targetedSolutions
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: solution type
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: string
          example: 1
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: string
          example: 5
        - name: search
          in: query
          description: search
          required: true
          schema:
            type: string
          example: a
        - name: filter
          in: query
          description: filter
          required: false
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSolutionsRequest"
      responses:
        200:
          description: "List of assigned solutions and targetted ones Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetedSolutionsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionTypeMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/programs/list:
    post:
      summary: Programs lists
      description: This API is used to list programs
           - The endpoint for **list Programs V1** is `/v1/programs/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Programs APIs
      operationId: Programs lists
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: string
          example: 1
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: string
          example: 5
        - name: search
          in: query
          description: search
          required: true
          schema:
            type: string
          example: Apple
      responses:
        200:
          description: "List programs Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listProgramsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/programs/create:
    post:
      summary: Create program
      description: This API is used to create program
           - The endpoint for **create Program V1** is `/v1/programs/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Programs APIs
      operationId: Create program
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createProgramRequest"
      responses:
        200:
          description: "Create Program Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProgramResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProgram400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/programs/update/{programId}:
    post:
      summary: Update program
      description: This API is used to update program
           - The endpoint for **update Program V1** is `/v1/programs/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Programs APIs
      operationId: Update program
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: programId
          in: path
          description: program Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createProgramRequest"
      responses:
        200:
          description: "Update program Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateProgramResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSolution400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/programs/forUserRoleAndLocation:
    post:
      summary: Auto targeted programs
      description: This API is used to get auto targeted programs
           - The endpoint for **forUserRoleAndLocation Programs V1** is `/v1/programs/forUserRoleAndLocation`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Programs APIs
      operationId: Auto targeted programs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: string
          example: 1
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: string
          example: 5
        - name: search
          in: query
          description: search
          required: true
          schema:
            type: string
          example: TEST
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSolutionsRequest"
      responses:
        200:
          description: "Auto targeted programs Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programForUserRoleAndLocationResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/programs/addRolesInScope/{programId}:
    post:
      summary: Add roles in programs
      description: This API is used to add roles in programs
           - The endpoint for **addRolesInScope Programs V1** is `/v1/programs/addRolesInScope`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Programs APIs
      operationId: Add roles in programs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: programId
          in: path
          description: program Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addRolesInScopeRequest"
      responses:
        200:
          description: "Add roles in programs Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programAddRolesInScopeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/programs/addEntitiesInScope/{programId}:
    post:
      summary: Add entities in programs
      description: This API is used to add entities in programs
           - The endpoint for **addEntitiesInScope Programs V1** is `/v1/programs/addEntitiesInScope`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Programs APIs
      operationId: Add entities in programs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: programId
          in: path
          description: program Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addEntitiesInScopeRequest"
      responses:
        200:
          description: "Add entities in programs Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programAddEntitiesInScopeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/programs/removeRolesInScope/{programId}:
    post:
      summary: Remove roles in programs
      description: This API is used to remove roles in programs scope.
           - The endpoint for **removeRolesInScope Programs V1** is `/v1/programs/removeRolesInScope`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Programs APIs
      operationId: Remove roles in programs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: programId
          in: path
          description: program Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addRolesInScopeRequest"
      responses:
        200:
          description: "Remove roles in programs Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programRemoveRolesInScopeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/programs/removeEntitiesInScope/{programId}:
    post:
      summary: Remove entities in programs
      description: This API is used to remove entities in program scope
           - The endpoint for **removeEntitiesInScope Programs V1** is `/v1/programs/removeEntitiesInScope`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Programs APIs
      operationId: Remove entities in programs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: programId
          in: path
          description: program Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addEntitiesInScopeRequest"
      responses:
        200:
          description: "Remove entities in programs Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programRemoveEntitiesInScopeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/forms/details/{formName}:
    post:
      summary: Form details
      description: This API is used to get form details
           - The endpoint for **details Foem V1** is `/v1/forms/details`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Forms APIs
      operationId: Form details
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: formName
          in: path
          description: form Name
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Form details Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formDetailsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/qr-code/image/{uniquecode}:
    get:
      summary: Get the image link of the qr code
      description: This API is used to get the image link of the qr code
           - The endpoint for **image qrCodes V1** is `/v1/qr-code/image`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - qrCodes APIs
      operationId: Get the image link of the qr code
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: uniquecode
          in: path
          description: uniquecode
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get the image link of the qr code Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QRCodeImageResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uniquecodeMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/qr-code/pdf:
    post:
      summary: Get qr code pdfs
      description: This API is used to get qr code pdfs
           - The endpoint for **image qrCodes V1** is `/v1/qr-code/pdf`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - qrCodes APIs
      operationId: Get qr code pdfs
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QrCodepdfRequest"
      responses:
        200:
          description: "Get qr code pdfs Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QrCodepdfResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/learning-resources/list:
    post:
      summary: To get learning resources
      description: This API is used to get learning resources
           - The endpoint for **list Learning Resources V1** is `/v1/learning-resources/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Learning Resources APIs
      operationId: To get learning resources
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: string
          example: 1
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LLListRequest"
      responses:
        200:
          description: "To get list of resources Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLListResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/app-releases/create:
    post:
      summary: Add latest app release
      description: This API is used to add latest app release
           - The endpoint for **create appVersion V1** is `/v1/app-releases/create
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - appVersion APIs
      operationId: Add latest app release
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/appVersionCreateRequest"
      responses:
        200:
          description: "Add latest app release Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appVersionCreateResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/app-releases/update/{appVersionId}:
    post:
      summary: Update app release data
      description: This API is used to update app release data
           - The endpoint for **update appVersion V1** is `/v1/app-releases/update
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - appVersion APIs
      operationId: Update app release data
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: appVersionId
          in: path
          description: app Version Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/appVersionCreateRequest"
      responses:
        200:
          description: "Update app release data Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appVersionUpdateResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/app-releases/list:
    get:
      summary: List of app releases
      description: This API is used to get list of app releases
           - The endpoint for **list appVersion V1** is `/v1/app-releases/list
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - appVersion APIs
      operationId: List of app releases
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: appName
          in: query
          description: app Name
          required: true
          schema:
            type: string
        - name: os
          in: query
          description: os
          required: true
          schema:
            type: string
        - name: releaseType
          in: query
          description: release Type
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: status
          required: true
          schema:
            type: string
      responses:
        200:
          description: "List of app releases Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appVersionListResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appNameMissingInQuery400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/app-releases/upload:
    post:
      summary: Upload latest app release
      description: This API is used to upload latest app release
           - The endpoint for **upload appVersion V1** is `/v1/app-releases/upload
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - appVersion APIs
      operationId: Upload latest app release
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                versionUpdate:
                  type: string
                  format: base64
      responses:
        200:
          description: "return CSV file"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  versionUpdate:
                    type: string
                    format: base64
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entities/listByEntityType/{entityType}:
    get:
      summary: List of entities based on its type
      description: This API is used to get lists of entities based on its type.
           - The endpoint for **listByEntityType Entities V1** is `/v1/entities/listByEntityType/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: List of entities based on its type
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: entityType
          in: path
          description: entity Type
          required: true
          schema:
            type: string
      responses:
        200:
          description: "List of entities based on its type Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listByEntityTypeResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityTypeMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v2/entities/listByEntityType/{entityType}:
    get:
      summary: List of entities based on its type 
      description: This API is used to get lists of entities based on its type.
           - The endpoint for **listByEntityType Entities V2** is `/v2/entities/listByEntityType/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: List of entities based on its type V2
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: entityType
          in: path
          description: entity Type
          required: true
          schema:
            type: string
      responses:
        200:
          description: "List of entities based on its type Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listByEntityTypeV2Response'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityTypeMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entities/subEntityList/{entityId}:
    post:
      summary: Get sub entity list for the given entity
      description: This API is used to get sub entity list for the given entity
           - The endpoint for **subEntityList Entities type V1** is `/v1/entities/subEntityList`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: Get sub entity list for the given entity
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: entityId
          in: path
          description: entity Id
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: entity type
          schema:
            type: string
        - name: search
          in: query
          description: search
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get sub entity list for the given entity Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subEntityListResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entities/details/{entityId}:
    get:
      summary: Get entities details information
      description: This API is used to get entities details information.
           - The endpoint for **details Entities V1** is `/v1/entities/details/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: Get entities details information
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: entityId
          in: path
          description: entity Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get entities details information Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityDetailsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entities/listByIds:
    post:
      summary: List entities
      description: This API is used to list entities
           - The endpoint for **listByIds Entities type V1** is `/v1/entities/listByIds`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: List entities
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/entitiesListByIdsRequest"
      responses:
        200:
          description: "List entities Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entitiesListByIdsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entitiesArrayMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entities/subEntitiesRoles/{entityId}:
    get:
      summary: Get roles based on entity type
      description: This API is used to get roles based on entity type.
           - The endpoint for **subEntitiesRoles Entities V1** is `/v1/entities/subEntitiesRoles/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: Get roles based on entity type
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: entityId
          in: path
          description: entity Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get roles based on entity type Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subEntitiesRolesResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entities/subEntityTypeList/{entityId}:
    get:
      summary: Get entities child hierarchy path
      description: This API is used to get entities child hierarchy path.
           - The endpoint for **subEntityTypeList Entities V1** is `/v1/entities/subEntityTypeList/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: Get entities child hierarchy path
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: entityId
          in: path
          description: entity Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get entities child hierarchy path Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subEntityTypeListResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entities/getUsersByEntityAndRole/{entityId}:
    get:
      summary: Get users by entityId and role
      description: This API is used to get users by entityId and role.
           - The endpoint for **getUsersByEntityAndRole Entities V1** is `/v1/entities/getUsersByEntityAndRole/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: Get users by entityId and role
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: entityId
          in: path
          description: entity Id
          required: true
          schema:
            type: string
        - name: role
          in: query
          description: role
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get users by entityId and role Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsersByEntityAndRoleResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/entities/subEntityListBasedOnRoleAndLocation/{locationId}:
    get:
      summary: Get list of sub entity based on role and location
      description: This API is used to get list of sub entity based on role and location.
           - The endpoint for **subEntityListBasedOnRoleAndLocation Entities V1** is `/v1/entities/subEntityListBasedOnRoleAndLocation/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Entities APIs
      operationId: Get list of sub entity based on role and location
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: locationId
          in: path
          description: location Id
          required: true
          schema:
            type: string
        - name: role
          in: query
          description: role
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get list of sub entity based on role and location Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subEntityListBasedOnRoleAndLocationResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-extension/getProfile/{userId}:
    post:
      summary: Get user profile
      description: This API is used to get user profile.
           - The endpoint for **getProfile User Extension V1** is `/v1/user-extension/getProfile/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Extension APIs
      operationId: Get user profile
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get user profile Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userExtensionGetProfileResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v2/user-extension/getProfile/{userId}:
    post:
      summary: Get user profile
      description: This API is used to get user profile.
           - The endpoint for **getProfile User Extension V2** is `/v2/user-extension/getProfile/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Extension APIs
      operationId: Get user profile V2
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get user profile Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userExtensionGetProfileV2Response'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-extension/update/{userId}:
    post:
      summary: Update user profile
      description: This API is used to update user profile.
           - The endpoint for **update User Extension V1** is `/v1/user-extension/update/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Extension APIs
      operationId: Update user profile
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userExtensionUpdateRequest"
      responses:
        200:
          description: "Update user profile Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userExtensionUpdateResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-extension/updateProfileRoles/{userId}:
    post:
      summary: Update profile roles
      description: This API is used to update profile roles.
           - The endpoint for **updateProfileRoles User Extension V1** is `/v1/user-extension/updateProfileRoles/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Extension APIs
      operationId: Update profile roles
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: user Id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userExtensionUpdateProfileRolesRequest"
      responses:
        200:
          description: "Update profile roles Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userExtensionUpdateProfileRolesResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-extension/getEntities:
    get:
      summary: Get user entities
      description: This API is used to get user entities
           - The endpoint for **getEntities User Extension V1** is `/v1/user-extension/getEntities/`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Extension APIs
      operationId: Get user entities
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: entityType
          in: query
          description: entityType
          schema:
            type: string
          example: school
        - name: page
          in: query
          description: page
          schema:
            type: string
          required: true
          example: 1
        - name: limit
          in: query
          description: limit
          schema:
            type: string
          example: 100
        - name: search
          in: query
          description: search value
          schema:
            type: string
          example: govt
      responses:
        200:
          description: "Get user entities Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEntitiesResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-extension/getEntityTypes:
    get:
      summary: Get user entity types
      description: This API is used to get user entity types
           - The endpoint for **getEntityTypes User Extension V1** is `/v1/user-extension/getEntityTypes`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Extension APIs
      operationId: Get user entity types
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Get user entity types Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEntityTypesResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-extension/programsByPlatformRoles:
    get:
      summary: List of Platform programs
      description: This API is used to get List of Platform programs
           - The endpoint for **programsByPlatformRoles Aws V1** is `/v1/user-extension/programsByPlatformRoles`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Extension APIs
      operationId: programsByPlatformRoles
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: role
          in: query
          description: role
          schema:
            type: string
          example: PM,PGM
      responses:
        200:
          description: "List of Platform programs Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramsByPlatformRoleslResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/user-extension/solutions/{programId}:
    get:
      summary:  List of solutions
      description: This API is used to get List of Platform solutions
           - The endpoint for **solutions Aws V1** is `/v1/user-extension/solutions`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - User Extension APIs
      operationId: solutions
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: role
          in: query
          description: role
          schema:
            type: string
          example: PM,PGM
        - name: programId
          in: path
          description: program Id
          required: true
          schema:
            type: string
          example: 5f9288fd5e25636ce6dcad66
      responses:
        200:
          description: "List of Platform solutions Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionsByPlatformRoleslResponse'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/solutionIdMissing400Error'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/aws/getDownloadableUrl:
    post:
      summary: Get downloadable URL
      description: This API is used to get downloadable URL.
           - The endpoint for **getDownloadableUrl Aws V1** is `/v1/aws/getDownloadableUrl`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Aws APIs
      operationId: Get downloadable URL
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsGetDownloadableUrlRequest"
      responses:
        200:
          description: "Get downloadable URL Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/awsGetDownloadableUrlResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/aws/preSignedUrls:
    post:
      summary: Get signed URL
      description: This API is used to get signed URL.
           - The endpoint for **preSignedUrls Aws V1** is `/v1/aws/preSignedUrls`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Aws APIs
      operationId: Get signed URL
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsGetSignedUrlRequest"
      responses:
        200:
          description: "Get signed URL Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/awsGetSignedUrlResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/aws/uploadFile:
    post:
      summary: Upload file to AWS
      description: This API is used to upload file to AWS.
           - The endpoint for **uploadFile Aws V1** is `/v1/aws/uploadFile`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Aws APIs
      operationId: Upload file to AWS
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsUploadFileRequest"
      responses:
        200:
          description: "Upload file to AWS Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/awsUploadFileResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/azure/upload:
    post:
      summary: Upload file to azure
      description: This API is used to Upload file to azure.
           - The endpoint for **upload Azure V1** is `/v1/azure/upload`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Azure APIs
      operationId: Upload file to azure
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/azureUploadRequest"
      responses:
        200:
          description: "Upload file to azure Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/azureUploadResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/azure/getDownloadableUrl:
    post:
      summary: Get downloadable URL
      description: This API is used to get downloadable URL.
           - The endpoint for **getDownloadableUrl Azure V1** is `/v1/azure/getDownloadableUrl`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Azure APIs
      operationId: Get downloadable URL Azure
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsGetDownloadableUrlRequest"
      responses:
        200:
          description: "Get downloadable URL Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/awsGetDownloadableUrlResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/azure/preSignedUrls:
    post:
      summary: Get signed URL
      description: This API is used to get signed URL.
           - The endpoint for **preSignedUrls Azure V1** is `/v1/azure/preSignedUrls`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Azure APIs
      operationId: Get signed URL Azure
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsGetSignedUrlRequest"
      responses:
        200:
          description: "Get signed URL Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/awsGetSignedUrlResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/azure/uploadFile:
    post:
      summary: Upload file to Azure
      description: This API is used to upload file to Azure.
           - The endpoint for **uploadFile Azure V1** is `/v1/azure/uploadFile`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Azure APIs
      operationId: Upload file to Azure
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsUploadFileRequest"
      responses:
        200:
          description: "Upload file to Azure Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/awsUploadFileResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/gcp/getDownloadableUrl:
    post:
      summary: Get downloadable URL
      description: This API is used to get downloadable URL.
           - The endpoint for **getDownloadableUrl Gcp V1** is `/v1/gcp/getDownloadableUrl`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Gcp APIs
      operationId: Get downloadable URL Gcp
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsGetDownloadableUrlRequest"
      responses:
        200:
          description: "Get downloadable URL Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/awsGetDownloadableUrlResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/gcp/preSignedUrls:
    post:
      summary: Get signed URL
      description: This API is used to get signed URL.
           - The endpoint for **preSignedUrls Aws V1** is `/v1/gcp/preSignedUrls`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Gcp APIs
      operationId: Get signed URL Gcp
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsGetSignedUrlRequest"
      responses:
        200:
          description: "Get signed URL Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gcpGetSignedUrlResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/gcp/uploadFile:
    post:
      summary: Upload file to GCP
      description: This API is used to upload file to AWS.
           - The endpoint for **uploadFile Gcp V1** is `/v1/gcp/uploadFile`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Gcp APIs
      operationId: Upload file to GCP
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/awsUploadFileRequest"
      responses:
        200:
          description: "Upload file to Gcp Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/awsUploadFileResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bucketNameMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/cloud-services/files/preSignedUrls:
    post:
      summary: Get signed URL
      description: This API is used to get signed URL.
           - The endpoint for **preSignedUrls Aws V1** is `/v1/files/preSignedUrls`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Files APIs
      operationId: files Get signed URL
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilepreSignedUrlsRequest"
      responses:
        200:
          description: "Get signed URL Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesGetSignedUrlResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/notifications/in-app/list:
    post:
      summary: List in-app Notifications
      description: This API is used to list in-app Notifications
           - The endpoint for **list Programs V1** is `/v1/notifications/in-app/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - inAppNotifications APIs
      operationId: List in-app Notifications
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page
          required: true
          schema:
            type: string
          example: 1
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: string
          example: 5
      responses:
        200:
          description: "List in-app Notifications Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listInAppNotificationsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/notifications/in-app/unReadCount:
    get:
      summary: Count Unread Notifications
      description: This API is used to get the count of all unRead notifications
           - The endpoint for **unReadCount Programs V1** is `/v1/notifications/in-app/unReadCount`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - inAppNotifications APIs
      operationId: Count Unread Notifications
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Count Unread Notifications Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unReadCountInAppNotificationsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/notifications/in-app/markAsRead/{notificationId}:
    post:
      summary: Mark as Notification Read
      description: This API is used to mark is_read true for particular notification.
           - The endpoint for **markAsRead Programs V1** is `/v1/notifications/in-app/markAsRead`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - inAppNotifications APIs
      operationId: Mark as Notification Read
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - in: path
          name: notificationId
          description: notification Id
          required: true
          schema:
            type: string
          example: 1
      responses:
        200:
          description: "Mark as Notification Read Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/markAsReadInAppNotificationsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/notifications/push/registerDevice:
    post:
      summary: Register device for push notifications
      description: This API is used to register device id for the particular logged in user
           - The endpoint for **registerDevice pushNotifications V1** is `/v1/notifications/push/registerDevice`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - pushNotifications APIs
      operationId: Register device for push notifications
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: apptype
          in: header
          description: app type
          required: true
          schema:
            type: string
          example: assessment
        - name: appname
          in: header
          description: app name
          required: true
          schema:
            type: string
          example: samiksha
        - name: os
          in: header
          description: os
          required: true
          schema:
            type: string
          example: android
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerDeviceRequest"
      responses:
        200:
          description: "Register device for push notifications Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerDeviceResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceIdMissing400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/notifications/push/pushToTopic:
    post:
      summary: Push Notification to topic
      description: This API is used to Push sample data to the topic given
           - The endpoint for **pushToTopic pushNotifications V1** is `/v1/notifications/push/pushToTopic`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - pushNotifications APIs
      operationId: Push Notification to topic
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                pushToTopic:
                  type: string
                  format: base64
      responses:
        200:
          description: "return CSV file"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  pushToTopic:
                    type: string
                    format: base64
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/notifications/push/subscribeToTopic:
    post:
      summary: Subscribe To Topic
      description: This API is used to Subscribe sample data to particular topic
           - The endpoint for **subscribeToTopic pushNotifications V1** is `/v1/notifications/push/subscribeToTopic`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - pushNotifications APIs
      operationId: Subscribe To Topic
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                subscribeToTopic:
                  type: string
                  format: base64
      responses:
        200:
          description: "return CSV file"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  subscribeToTopic:
                    type: string
                    format: base64
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/notifications/push/unsubscribeFromTopic:
    post:
      summary: Unsubscribe From Topic
      description: This API is used to unsubscribe sample data to particular topic
           - The endpoint for **unsubscribeFromTopic pushNotifications V1** is `/v1/notifications/push/unsubscribeFromTopic`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - pushNotifications APIs
      operationId: Unsubscribe From Topic
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                unsubscribeFromTopic:
                  type: string
                  format: base64
      responses:
        200:
          description: "return CSV file"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  unsubscribeFromTopic:
                    type: string
                    format: base64
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/notifications/push/pushToUsers:
    post:
      summary: Push notification data to pushToUsers
      description: This API is used to Push notification data to pushToUsers
           - The endpoint for **pushToUsers pushNotifications V1** is `/v1/notifications/push/pushToUsers`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - pushNotifications APIs
      operationId: Push notification data to pushToUsers
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                notifications:
                  type: string
                  format: base64
      responses:
        200:
          description: "return CSV file"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  notifications:
                    type: string
                    format: base64
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/dictionary/keywords/upload:
    post:
      summary: Upload Keywords to Dictionary
      description: This API is used to Push keywords data to the dictionary index
           - The endpoint for **upload Dictionary V1** is `/v1/dictionary/keywords/upload`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      tags:
       - Dictionary APIs
      operationId: Upload Keywords to Dictionary
      parameters:
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: >-
            - The body payload comprises of the metadata of the user being created
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                keywords:
                  type: string
                  format: base64
      responses:
        200:
          description: "return CSV file"
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  keywords:
                    type: string
                    format: base64
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
                
components:
  schemas:
    CreateUserRequestBody:
      title: CreateUserRequestBody
      description: "Request Data for Publishing the program based on program_id or channel"
      type: object
      required:
        - userName
        - email
        - role
        - createdBy
      properties:
        userName:
          type: string
          description: userName of user
        email:
          type: string
          description: email of user
        role:
          type: string
          description: role of user example SYS_ADMIN
        createdBy:
          type: string
          description: the created by user Id
      example:
        userName: a
        email: a@a.com
        role: SYS_ADMIN
        createdBy: SYSTEM
    500Error:
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: oops something went wrong
      example:
        status: false
        message: oops something went wrong
    400Error:
      type: object
      properties:
        status:
          type: string
          example: 400
        message:
          type: array
          items:
           $ref: '#/components/schemas/User400Response'
    CreateUserResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      example:
        status: 200
        message: User created successfully
    User400Response:
      type: object
      properties:
        location:
          type: string
          example: body
        param:
          type: string
          example: email
        msg:
          type: string
          example: required email of the user
    IsSystemAdminRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: a@a.com
    IsSystemAdminResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        success:
          type: boolean
          example: true
    PrivateProgramsList:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: List of private programs
        result:
          type: array
          items:
            $ref: '#/components/schemas/PrivateProgramsResult'
    PrivateProgramsResult:
      type: object
      properties:
        _id:
          type: string
          example: 5edf0d14c57dab7f639f3e0d
        externalId:
          type: string
          example: 'EF-DCPCR-2018-001-TEMPLATE-2020-06-09 09:46:20'
        name:
          type: string
          example: My program
        description:
          type: string
          example: DCPCR Assessment Framework 2018
        isAPrivateProgram:
          type: boolean
          example: false
    400ErrorUserIdMissing:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: userId
              msg:
                type: string
                example: required userId of the user
    CreateProgramRequestData:
      type: object
      required:
        - programName
        - solutionName
      properties:
        programName:
          description: 'program name'
          type: string
          example: Test project program
        solutionName:
          description: 'solution name'
          type: string
          example: Test project solution
    CreateProgramResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: List of private programs
        result:
          type: object
          properties:
            programs:
              $ref: '#/components/schemas/CreateProgramData'
            solutions:
              $ref: '#/components/schemas/CreateSolutionData'
    CreateProgramData:
      type: object
      properties:
        resourceType:
          type: string
          example:
            - Program
        language:
          type: string
          example:
            - English
        keywords:
          type: string
          example:
            - keyword1
            - keyword2
        concepts:
          type: string
          example: []
        createdFor:
          type: string
          example: []
        components:
          type: string
          example: []
        isAPrivateProgram:
          type: boolean
          example: false
        rootOrganisations:
          type: string
          example: []
        _id:
          type: string
          example: 5f44b08cdbe917732246149f
        deleted:
          type: boolean
          example: DCPCRfalse
        externalId:
          type: string
          example: Test project program-1598337164794
        name:
          type: string
          example: Test project program
        description:
          type: string
          example: Test project program
        status:
          type: string
          example: active
        imageCompression:
          type: object
          example:
            quality: 10
        updatedAt:
          type: string
          example: "2020-08-25T06:32:44.796Z"
        createdAt:
          type: string
          example: "2020-08-25T06:32:44.796Z"
    CreateSolutionData:
      type: object
      properties:
        resourceType:
          type: string
          example:
            - Program
        language:
          type: string
          example: []
        keywords:
          type: string
          example: []
        concepts:
          type: string
          example: []
        createdFor:
          type: string
          example: []
        themes:
          type: string
          example: []
        flattenedThemes:
          type: string
          example: []
        entities:
          type: string
          example: []
        registry:
          type: string
          example: []
        isRubricDriven:
          type: boolean
          example: false
        enableQuestionReadOut:
          type: boolean
          example: false
        captureGpsLocationAtQuestionLevel:
          type: boolean
          example: false
        isAPrivateProgram:
          type: boolean
          example: false
        allowMultipleAssessemts:
          type: boolean
          example: false
        isDeleted:
          type: boolean
          example: false
        rootOrganisations:
          type: string
          example: []
        _id:
          type: string
          example: 5f44b08cdbe91773224614a0
        deleted:
          type: boolean
          example: false
        name:
          type: string
          example: Test project solution
        externalId:
          type: string
          example: Test project solution-1598337164794
        description:
          type: string
          example: Test project solution
        programId:
          type: string
          example: 5f44b08cdbe917732246149f
        programExternalId:
          type: string
          example: Test project program-1598337164794
        programName:
          type: string
          example: Test project program
        programDescription:
          type: string
          example: Test project program
        updatedAt:
          type: string
          example: "2020-08-25T06:32:44.796Z"
        createdAt:
          type: string
          example: "2020-08-25T06:32:44.796Z"
    entitiesMappingForm:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Entities mapping form fetched successfully
        result:
          type: array
          items:
            $ref: '#/components/schemas/entitiesMappingFormsResult'
    entitiesMappingFormsResult:
      type: object
      properties:
        field:
          type: string
        label:
          type: string
        value:
          type: string
        visible:
          type: boolean
        editable:
          type: boolean
        input:
          type: string
        validation:
          type: object
      example:
        - field: district
          label: Select District
          value: ""
          visible: true
          editable: true
          input: text
          validation:
            required: false
        - field: block
          label: Select Block
          value: ""
          visible: true
          editable: true
          input: text
          validation:
            required: true
    400ErrorForEntitiesMappingForm:
      type: object
      properties:
        location:
          type: string
        param:
          type: string
        msg:
          type: string
      example:
        - location: path
          param: stateId
          msg: required Entity id 
        - location: query
          param: roleId
          msg: required role id
    getUserOrganisationsAndRootOrganisations:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: User organisations fetched successfully
        result:
          type: object
          properties:
            createdFor:
              type: string
            rootOrganisations:
              type: string
          example:
            createdFor: [
              01305447637218918413
              ]
            rootOrganisations: [
              01305447637218918413
              ]
    userSearchResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: User profile fetched successfully
        result:
          type: array
          items:
            $ref: '#/components/schemas/userSearchResult'
    userSearchResult:
      type: object
      properties:
        lastName:
          type: string
          example: Shikhshlokam
        maskedPhone:
          type: string
          example: '******0005'
        rootOrgName:
          type: string
          example: SLDEV
        roles:
          type: array
          items:
            type: string
            example: "PUBLIC"
        channel:
          type: string
          example: SLDEV
        updatedDate:
          type: string
          example: 
        prevUsedPhone:
          type: string
          example: ""
        stateValidated:
          type: boolean
          example: false
        isDeleted:
          type: boolean
          example: false
        organisations:
          type: array
          items:
            type: object
            properties:
              updatedBy:
                type: string
                example: 
              organisationId:
                type: string
                example: "01305447637218918413"
              orgName:
                type: string
                example: SLDEV
              addedByName:
                type: string
                example: 
              addedBy:
                type: string
                example: 
              roles:
                type: array
                items:
                  type: string
                  example: "PUBLIC"
              approvedBy:
                type: string
                example: 
              updatedDate:
                type: string
                example: 
              userId:
                type: string
                example: "01c04166-a65e-4e92-a87b-a9e4194e771d"
              approvaldate:
                type: string
                example: 
              isDeleted: 
                type: boolean
                example: false
              parentOrgId:
                type: string
                example:
              hashTagId:
                type: string
                example: 01305447637218918413
              isRejected:
                type: string
                example: 
              position:
                type: string
                example: 
              id:
                type: string
                example: 0130661229826457602
              orgjoindate:
                type: string
                example: "2020-07-17 11:18:57:674+0000"
              isApproved:
                type: string
                example: 
              orgLeftDate:
                type: string
                example: 
        flagsValue:
          type: string
          example: 3
        maskedEmail:
          type: string
          example: a1@shikshalokam.dev
        id:
          type: string
          example: "01c04166-a65e-4e92-a87b-a9e4194e771d"
        tempPassword:
          type: string
          example:  
        email:
          type: string
          example: a1@shikshalokam.dev
        identifier:
          type: string
          example: "01c04166-a65e-4e92-a87b-a9e4194e771d"
        thumbnail:
          type: string
          example:  
        updatedBy:
          type: string
          example:  
        profileSummary:
          type: string
          example:  
        phoneVerified:
          type: boolean
          example: true
        locationIds:
          type: array
          items:
            type: string
            example: 
        registryId:
          type: string
          example:  
        recoveryPhone:
          type: string
          example: ""
        userName:
          type: string
          example: "a1"
        rootOrgId:
          type: string
          example: 01305447637218918413
        prevUsedEmail:
          type: string
          example: ""
        firstName:
          type: string
          example: "a1"
        lastLoginTime:
          type: string
          example:  
        emailVerified:
          type: boolean
          example: true
        tncAcceptedOn:
          type: string
          example: "2020-11-20T05:49:25.776Z"
        framework:
          type: object
          example: {}
        createdDate:
          type: string
          example: "2020-11-20T05:49:25.776Z"
        phone:
          type: string
          example: "******0005"
        createdBy:
          type: string
          example: "47ab2766-7595-4867-bbe3-7c23dc5e4552"
        currentLoginTime:
          type: string
          example:
        userType:
          type: string
          example: OTHER
        tncAcceptedVersion:
          type: string
          example: v1
        status: 
          type: string
          example: 1
    userSolutionsRequest:
      type: object
      required:
        - role
        - state
        - district
        - school
      properties:
        role: 
          description: 'role'
          type: string
          example: HM 
        state:
          description: 'state'
          type: string
          example: "236f5cff-c9af-4366-b0b6-253a1789766a"
        district:
          description: 'district'
          type: string
          example: "1dcbc362-ec4c-4559-9081-e0c2864c2931"
        school:
          description: 'school'
          type: string
          example: "c5726207-4f9f-4f45-91f1-3e9e8e84d824"
    userSolutions400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: programId is required field
    userSolutionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: "5fc3dff14ea9b44f3340afe2"
              type:
                type: string
                example: "observation"
              externalId:
                type: string
                example: "SCOPE_OBSERVATION_TEST"
              name:
                type: string
                example: "observation testing"
              description:
                type: string
                example: "Testing observation"
        count:
          type: string
          example: 1
        programName:
          type: string
          example: TEST_SCOPE_PROGRAM
        programId:
          type: string
          example: "5ff438b04698083dbfab7284"
        description:
          type: string
          example: View and participate in educational programs active in your location and designed for your role
    userProgramResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: "5fc3dff14ea9b44f3340afe2"
              externalId:
                type: string
                example: "SCOPE_OBSERVATION_TEST"
              name:
                type: string
                example: "observation testing"
              solutions:
                type: string
                example: 16
        count:
          type: string
          example: 1
        description:
          type: string
          example: View and participate in educational programs active in your location and designed for your role
    entityTypesByLocationAndRoleResponse:
      type: object
      properties:
        message: 
          type: string
          example: Entity types fetched successfully
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: string
            example: ["district", "block", "cluster"]
    entityTypesByLocationAndRole400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: required location id
    userRoleListRequest:
      type: object
      properties:
        query: 
          type: object
          example:
            code: HM
        projection: 
          type: array
          items:
            type: string
          example: 
              ["_id","code"]
    userRoleListResponse:
      type: object
      properties:
        message: 
          type: string
          example: Entity types fetched successfully
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: object
            example: 
              "_id": "5d6e521066a9a45df3aa891e"
              "code": "HM"
    getFormResponse:
      type: object
      properties:
        message: 
          type: string
          example: Entity types fetched successfully
        status:
          type: string
          example: 200
        result:
          type: object
          properties:
            form:
              type: array
              items:
                 oneOf:
                  - $ref: '#/components/schemas/getFormFirst'
                  - $ref: '#/components/schemas/getFormSecond'
                  - $ref: '#/components/schemas/getFormThird'
                  - $ref: '#/components/schemas/getFormFourth'
                  - $ref: '#/components/schemas/getFormFifth'
            statesWithSubEntities:
              type: object
              example:
                "5da829874c67d63cca1bd9d0": [
                  "district",
                  "block",
                  "cluster",
                  "school"
                ]
    getFormFirst:
      type: object
      properties:
        label: 
          type: string
          example: firstName
        field: 
          type: string
          example: firstName
        value: 
          type: string
          example: ""
        visible:
          type: boolean
          example: true
        editable:
          type: boolean
          example: true
        validation:
          type: object
          example:
            "required": true,
            "regex": "/^[A-Za-z]+$/"
        input:
          type: string
    getFormSecond:
      type: object
      properties:
        label: 
          type: string
          example: lastName
        field: 
          type: string
          example: lastName
        value: 
          type: string
          example: ""
        visible:
          type: boolean
          example: true
        editable:
          type: boolean
          example: true
        validation:
          type: object
          example:
            "required": true,
            "regex": "/^[A-Za-z]+$/"
        input:
          type: string
    getFormThird:
      type: object
      properties:
        label: 
          type: string
          example: email
        field: 
          type: string
          example: email
        value: 
          type: string
          example: ""
        visible:
          type: boolean
          example: true
        editable:
          type: boolean
          example: true
        validation:
          type: object
          example:
            "required": true,
            "regex": "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"
        input:
          type: string
    getFormFourth:
      type: object
      properties:
        label: 
          type: string
          example: phoneNumber
        field: 
          type: string
          example: phoneNumber
        value: 
          type: string
          example: ""
        visible:
          type: boolean
          example: true
        editable:
          type: boolean
          example: true
        validation:
          type: object
          example:
            "required": true,
            "regex": "^((+)?(d{2}[-]))?(d{10}){1}?$"
        input:
          type: string
    getFormFifth:
      type: object
      properties:
        label: 
          type: string
          example: state
        field: 
          type: string
          example: state
        value: 
          type: string
          example: ""
        visible:
          type: boolean
          example: true
        editable:
          type: boolean
          example: true
        validation:
          type: object
          example:
            "required": true,
            "regex": ""
        input:
          type: string    
    getForm400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: headers
              param:
                type: string
                example: appname
              msg:
                type: string
                example: required app name in headers
    userProfileSaveRequest:
      type: object
      properties:
        data:
          type: object
          required:
            - firstName
            - lastName
            - email
            - phoneNumber
            - district
          properties:
            firstName:
              type: string
              example: john
            lastName:
              type: string
              example: david
            email:
              type: string
              example: john@test.com
            phoneNumber:
              type: string
              example: "***009"
            district:
              type: array
              items:
                type: object
                properties:
                  label:
                    type: string
                    example: name
                  value:
                    type: string
                    example: id
    userProfileSaveResponse:
      type: object
      properties:
        message:
          type: string
          example: User profile Saved successfully
        status:
          type: string
          example: 200
        result:
          $ref: '#/components/schemas/userProfileSaveRequest'
    staticLinkListResponse:
      type: object
      properties:
        message:
          type: string
          example: User profile Saved successfully
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              privacyPolicy:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5d259439a9bc1209d0184390
                  value:
                    type: string
                    example: privacyPolicy
                  link:
                    type: string
                    example: "https://shikshalokam.org/wp-content/uploads/2019/01/data_privacy_policy.html"
                  title:
                    type: string
                    example: Privacy Policy
              termsOfUse:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5d259439a9bc1209d0184391
                  value:
                    type: string
                    example: termsOfUse
                  link:
                    type: string
                    example: "https://shikshalokam.org/wp-content/uploads/2019/05/Final-ShikshaLokam-Terms-of-Use-MCM-08052019-Clean-copy-1.html"
                  title:
                    type: string
                    example: Terms of Use
    entityTypesListResponse:
      type: object
      properties:
        message: 
          type: string
          example: Entity types fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 5d259439a9bc1209d0184391
              name:
                type: string
                example: school
    appDetailsResponse:
      type: object
      properties:
        message: 
          type: string
          example: Entity types fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            name:
              type: string
              example: samiksha
            displayName:
              type: string
              example: Samiksha
            description:
              type: string
              example: Get the app to discover more
            logo:
              type: string
              example: "https://storage.googleapis.com/download/storage/v1/b/sl-dev-storage/o/static%2Fapps%2Fsamiksha.png?alt=media"
            playstoreLink:
              type: string
              example: "https://play.google.com/store/apps/details?id=org.shikshalokam.samiksha"
            appStoreLink:
              type: string
              example: "https://apps.apple.com/in/app/shikshalokam-samiksha/id1442066610"
    appDetails400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: appName
              msg:
                type: string
                example: required app name
    createAppRequest:
      type: object
      required:
        - name
        - displayName
        - description
        - logo
        - playstoreLink
        - appStoreLink
        - status
      properties:
        name:
          description: app Name
          type: string
          example: samiksha
        displayName:
          description: display Name
          type: string
          example: Samiksha
        description:
          description: discription of app
          type: string
          example: Get the app to discover more
        logo:
          description: app logo path
          type: string
          example: "https://storage.googleapis.com/download/storage/v1/b/sl-dev-storage/o/static%2Fapps%2Fsamiksha.png?alt=media"
        playstoreLink:
          description: app play store link
          type: string
          example: "https://play.google.com/store/apps/details?id=org.shikshalokam.samiksha"
        appStoreLink:
          description: app app store link
          type: string
          example: "https://apps.apple.com/in/app/shikshalokam-samiksha/id1442066610"
        status:
          description: status of app
          type: string
          example: active
    createAppResponse:
      type: object
      properties:
        message: 
          type: string
          example: App created successfully
        status:
          type: integer
          example: 200
    createApp400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: body
              param:
                type: string
                example: playstoreLink
              msg:
                type: string
                example: required playStoreLink field
    updateAppRequest:
      type: object
      required:
        - displayName
        - description
        - playstoreLink
        - appStoreLink
        - status
      properties:
        displayName:
          description: display Name
          type: string
          example: Samiksha
        description:
          description: discription of app
          type: string
          example: Get the app to discover more
        playstoreLink:
          description: app play store link
          type: string
          example: "https://play.google.com/store/apps/details?id=org.shikshalokam.samiksha"
        appStoreLink:
          description: app app store link
          type: string
          example: "https://apps.apple.com/in/app/shikshalokam-samiksha/id1442066610"
        status:
          description: status of app
          type: string
          example: active
    updateAppResponse:
      type: object
      properties:
        message: 
          type: string
          example: App details updated successfully
        status:
          type: integer
          example: 200
    organisationsListResponse:
      type: object
      properties:
        message: 
          type: string
          example: Fetched organisations lists successfully
        status:
          type: integer
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: ShikshaLokamDev
              id:
                type: string
                example: 0125747659358699520
    platformUserRolesGetProfileResponse:
      type: object
      properties:
        message: 
          type: string
          example: Platform user profile fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
                example: a2
              id:
                type: string
                example: 0125747659358699520
              role:
                type: array
                items:
                  type: string
                example: ["OBS_DESIGNER","OBS_REVIEWER"]
    createSolutionRequest:
      type: object
      properties:
        resourceType:
          description: resource Type
          type: array
          items:
            type: string
          example: []
        language:
          description: language
          type: array
          items:
            type: string
          example: []
        keywords:
          description: keywords
          type: array
          items:
            type: string
          example: []
        concepts:
          description: concepts
          type: array
          items:
            type: string
          example: []
        createdFor:
          description: created for
          type: array
          items:
            type: string
          example: [01305447637218918413]
        themes:
          description: themes
          type: array
          items:
            type: string
          example: []
        flattenedThemes:
          description: flattened themes
          type: array
          items:
            type: string
          example: []
        entities:
          description: entities
          type: array
          items:
            type: string
          example: ["5beaa888af0065f0e0a10515"]
        registry:
          description: registry
          type: array
          items:
            type: string
          example: []
        isRubricDriven:
          description: is RubricDriven
          type: boolean
          example: false
        enableQuestionReadOut:
          description: enable Question ReadOut
          type: boolean
          example: false
        allowMultipleAssessemts:
          description: allow MultipleAssessemts
          type: boolean
          example: false
        isDeleted:
          description: isDeleted
          type: boolean
          example: false
        rootOrganisations:
          description: rootOrganisations
          type: array
          items:
            type: string
          example: [01305447637218918413]
        programExternalId:
          description: program external Id
          type: string
          example: AMAN_TEST_123-1607937244986
        entityType:
          description: entity Type
          type: string
          example: school
        type:
          description: Type
          type: string
          example: improvementProject
        subType:
          description: sub Type
          type: string
          example: improvementProject
        isReusable:
          description: is Reusable
          type: boolean
          example: false
        externalId:
          description: externalId of solution
          type: string
          example: "01c04166-a65e-4e92-a87b-a9e4194e771d-1607936956167"
    createSolutionResponse:
      type: object
      properties:
        message: 
          type: string
          example: Solution created successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            _id:
              type: string
              example: 5ff447e127ef425953bd8306
    createSolution400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: body
              param:
                type: string
                example: name
              msg:
                type: string
                example: required solution name
    updateSolutionResponse:
      type: object
      properties:
        message: 
          type: string
          example: Solution updated successfully
        status:
          type: integer
          example: 200
    listSolutionRequest:
      type: object
      properties:
        isReusable: 
          type: boolean
          example: false
    listSolutionResponse:
      type: object
      properties:
        message: 
          type: string
          example: Solutions lists fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: "5d15b0d7463d3a6961f91748"
                  externalId:
                    type: string
                    example: LSAS-Dream A Dream-2019-TEMPLATE
                  name:
                    type: string
                    example: Life Skills Assessment Survey
                  description:
                    type: string
                    example: Life Skills Assessment Survey
            count:
              type: integer
              example: 1
    forUserRoleAndLocationRequest:
      type: object
      required:
        - role
        - state
        - district
        - school
      properties:
        role: 
          description: 'role'
          type: string
          example: HM 
        state:
          description: 'state'
          type: string
          example: "236f5cff-c9af-4366-b0b6-253a1789766a"
        district:
          description: 'district'
          type: string
          example: "1dcbc362-ec4c-4559-9081-e0c2864c2931"
        school:
          description: 'school'
          type: string
          example: "c5726207-4f9f-4f45-91f1-3e9e8e84d824"
        filter:
          description: filter 
          type: object
          example: {}
    forUserRoleAndLocationResponse:
      type: object
      properties:
        message: 
          type: string
          example: Successfully targeted solutions fetched
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: "5fc3dff14ea9b44f3340afe2"
                  programId:
                    type: string
                    example: "5ff438b04698083dbfab7284"
                  programName:
                    type: string
                    example: "TEST scope in program"
            count:
              type: string
              example: 1
    detailsBasedOnRoleAndLocationResponse:
      type: object
      properties:
        message: 
          type: string
          example: Successfully targeted solutions fetched
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            _id:
              type: string
              example: "5fc3dff14ea9b44f3340afe2"
            isAPrivateProgram:
              type: boolean
              example: false
            programId:
              type: string
              example: "5ff438b04698083dbfab7284"
            programExternalId:
              type: string
              example: "TEST_SCOPE_PROGRAM"
            programName:
              type: string
              example: "TEST_SCOPE_PROGRAM"
            programDescription:
              type: string
              example: "TEST_SCOPE_PROGRAM"
            entityType:
              type: string
              example: "school"
            entityTypeId:
              type: string
              example: "5d15a959e9185967a6d5e8a6"
            externalId:
              type: string
              example: "f449823a-06bb-4a3f-9d49-edbe1524ebbb-1606672337956"
            projectTemplateId:
              type: string
              example: "5ff4a46aa87a5c721f9eb664"
    solutionIdMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: _id
              msg:
                type: string
                example: required solution id
    addRolesInScopeRequest:
      type: object
      properties:
        roles:
          description: roles
          type: array
          items:
            type: string
          example: ["DEO","SPD"]
    addRolesInScopeResponse:
      type: object
      properties:
        message: 
          type: string
          example: Successfully added roles in solutions scope
        status:
          type: integer
          example: 200
    addEntitiesInScopeRequest:
      type: object
      properties:
        entities:
          description: entities id
          type: array
          items:
            type: string
          example: ["5f33c3d85f637784791cd830"]
    addEntitiesInScopeResponse:
      type: object
      properties:
        message: 
          type: string
          example: Successfully added entities in solution scope
        status:
          type: integer
          example: 200
    removeRolesInScopeResponse:
      type: object
      properties:
        message: 
          type: string
          example: Successfully removed roles in solution scope
        status:
          type: integer
          example: 200
    removeEntitiesInScopeResponse:
      type: object
      properties:
        message: 
          type: string
          example: Successfully removed entities in solution scope
        status:
          type: integer
          example: 200
    listProgramsResponse:
      type: object
      properties:
        message: 
          type: string
          example: Program lists fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: "5d15b0d7463d3a6961f91748"
                  externalId:
                    type: string
                    example: APPLE-ASSESSMENT-PROGRAM
                  description:
                    type: string
                    example: Apple Program 2018
                  isAPrivateProgram:
                    type: boolean
                    example: false
            count:
              type: integer
              example: 1
    createProgramRequest:
      type: object
      properties:
        externalId:
          description: external Id
          type: string
          example: PROGID01
        name:
          description: name
          type: string
          example: DCPCR School Development Index 2018-19
        description:
          description: description
          type: string
          example: DCPCR School Development Index 2018-19
        isDeleted:
          description: is Deleted
          type: boolean
          example: false
        resourceType:
          description: resourceType
          type: array
          items:
            type: string
          example: ["program"]
        language:
          description: language
          type: array
          items:
            type: string
          example: []
        keywords:
          description: keywords
          type: array
          items:
            type: string
          example: []
        concepts:
          description: concepts
          type: array
          items:
            type: string
          example: []
        createdFor:
          description: created for
          type: array
          items:
            type: string
          example: [01305447637218918413]
        userId:
          description: user Id
          type: string
          example: "a082787f-8f8f-42f2-a706-35457ca6f1fd"
        imageCompression:
          description: imageCompression
          type: object
          example: 
            quality: 10
        components:
          description: solution Ids
          type: array
          items:
            type: string
          example: ["5b98fa069f664f7e1ae7498c"]
        scope:
          type: object
          properties:
            entityType:
              description: entity Type
              type: string
              example: school
            entities:
              description: entities Ids
              type: array
              items:
                type: string
              example: ["5b98fa069f664f7e1ae7498c"]
            roles:
              description: roles
              type: array
              items:
                type: string
              example: ["HM"]
    createProgramResponse:
      type: object
      properties:
        message: 
          type: string
          example: Program created successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            _id:
              type: string
              example: 5ff09aa4a43c952a32279234
    createProgram400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: body
              param:
                type: string
                example: name
              msg:
                type: string
                example: required program name
    updateProgramResponse:
      type: object
      properties:
        message: 
          type: string
          example: Program updated successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            _id:
              type: string
              example: 5ff09aa4a43c952a32279234
    programForUserRoleAndLocationResponse:
      type: object
      properties:
        message:
          type: string
          example: Targeted programs fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: "5fc3dff14ea9b44f3340afe2"
                  externalId:
                    type: string
                    example: "TEST_SCOPE_PROGRAM"
                  name:
                    type: string
                    example: "TEST scope in program"
                  solutions:
                    type: string
                    example: 16
            count:
              type: string
              example: 1 
    programAddRolesInScopeResponse:
      type: object
      properties:
        message:
          type: string
          example: Successfully added roles in program scope
        status:
          type: integer
          example: 200
    programIdMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: _id
              msg:
                type: string
                example: required program id
    programAddEntitiesInScopeResponse:
      type: object
      properties:
        message:
          type: string
          example: Successfully added entities in program scope
        status:
          type: integer
          example: 200
    programRemoveRolesInScopeResponse:
      type: object
      properties:
        message:
          type: string
          example: Successfully removed roles in program scope
        status:
          type: integer
          example: 200
    programRemoveEntitiesInScopeResponse:
      type: object
      properties:
        message:
          type: string
          example: Successfully removed entities in program scope
        status:
          type: integer
          example: 200
    formNameMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: _id
              msg:
                type: string
                example: required form name
    formDetailsResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: Forms fetched successfully"
        result:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/formDetail1'
              - $ref: '#/components/schemas/formDetail2'
              - $ref: '#/components/schemas/formDetail3'
    formDetail1:
      type: object
      properties:
        field: 
          type: string
          example: title
        label: 
          type: string
          example: Title
        value: 
          type: string
          example: ""
        visible:
          type: boolean
          example: true
        editable:
          type: boolean
          example: true
        input:
          type: string
        validation:
          type: object
          example:
            "required": true
    formDetail2:
      type: object
      properties:
        field: 
          type: string
          example: description
        label: 
          type: string
          example: Description
        value: 
          type: string
          example: ""
        visible:
          type: boolean
          example: true
        editable:
          type: boolean
          example: true
        input:
          type: string
          example: textarea
        validation:
          type: object
          example:
            "required": true
    formDetail3:
      type: object
      properties:
        field: 
          type: string
          example: categories
        label: 
          type: string
          example: Categories
        value: 
          type: string
          example: ""
        visible:
          type: boolean
          example: true
        editable:
          type: boolean
          example: true
        input:
          type: string
          example: select
        options:
          type: array
          items:
            type: string
          example: []
        validation:
          type: object
          example:
            "required": false
    QRCodeImageResponse:
      type: object
      properties:
        message:
          type: string
          example: Qr code image generated successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            url:
              type: string
              example: "https://sl-bodh-storage.s3.amazonaws.com/courses/courseId"
    uniquecodeMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: _id
              msg:
                type: string
                example: Unique Code is required  
    QrCodepdfRequest:
      type: object
      properties:
        codes:
          type: array
          items:
            type: string
            example: N7W8L4
    QrCodepdfResponse:
      type: object
      properties:
        message:
          type: string
          example: Qr code pdfs generated successfully
        status:
          type: integer
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: N7W8L4
              url:
                type: string
                example: "https://sl-bodh-storage.s3.amazonaws.com/courses/courseId/a.pdf"
    LLListRequest:
      type: object
      properties:
        filters:
          type: object
          properties:
            category:
              description: category
              type: array
              items:
                type: string
              example: ["SLDEV"]
            subcategory:
              description: sub category
              type: array
              items:
                type: string
              example: ["Class 1"]
            topic:
              description: topic
              type: array
              items:
                type: string
              example: ["Science"]
            language:
              description: language
              type: array
              items:
                type: string
              example: [kannada, English]
    LLListResponse:
      type: object
      properties:
        count:
          type: string
          example: 19
        content:
          type: array
          items:
            type: object
            properties:
              ownershipType:
                type: array
                items:
                  type: string
                example: [createdBy]
              copyright:
                type: string
                example: SLDEV
              previewUrl:
                type: string
                example: https://dev.bodh.shikshalokam.org/resources/play/content/do_113059727462957056137
              keywords:
                type: array
                items:
                  type: string
                example: [Copy Feature]
              plugins:
                type: array
                items:
                  type: object
                  properties:
                    identifier:
                      type: string
                      example: org.ekstep.questionunit.mtf
                    semanticVersion:
                      type: string
                      example: 1.2
              channel:
                type: string
                example: 01305447637218918413
              questions:
                type: array
                items:
                  type: string
                example: ["do_11305831684202496011",
                      "do_11305967213246054413",
                      "do_11305968613014732814",
                      "do_11305967010460467212"]
              downloadUrl:
                type: string
                example: https://sldevsunbird.blob.core.windows.net/sl-dev-assets/ecar_files/do_113059727462957056137/copy-feature_1594207213185_do_113059727462957056137_1.0.ecar
              organisation:
                type: array
                items:
                  type: string
                example: [SLDEV]
              language:
                type: array
                items:
                  type: string
                example: [English]
              mimeType:
                type: string
                example: "application/vnd.ekstep.ecml-archive"
              variants:
                type: object
                properties:
                  spine:
                    type: object
                    properties:
                      ecarUrl:
                        type: string
                        example: https://sldevsunbird.blob.core.windows.net/sl-dev-assets/ecar_files/do_113059727462957056137/copy-feature_1594207213996_do_113059727462957056137_1.0_spine.ecar
                      size:
                        type: string
                        example: 179707
              editorState:
                type: string
                example: "{\"plugin\":{\"noOfExtPlugins\":12,\"extPlugins\":[{\"plugin\":\"org.ekstep.contenteditorfunctions\",\"version\":\"1.2\"},{\"plugin\":\"org.ekstep.keyboardshortcuts\",\"version\":\"1.0\"},{\"plugin\":\"org.ekstep.richtext\",\"version\":\"1.0\"},{\"plugin\":\"org.ekstep.iterator\",\"version\":\"1.0\"},{\"plugin\":\"org.ekstep.navigation\",\"version\":\"1.0\"},{\"plugin\":\"org.ekstep.reviewercomments\",\"version\":\"1.0\"},{\"plugin\":\"org.ekstep.questionunit.mtf\",\"version\":\"1.2\"},{\"plugin\":\"org.ekstep.questionunit.mcq\",\"version\":\"1.3\"},{\"plugin\":\"org.ekstep.keyboard\",\"version\":\"1.1\"},{\"plugin\":\"org.ekstep.questionunit.reorder\",\"version\":\"1.1\"},{\"plugin\":\"org.ekstep.questionunit.sequence\",\"version\":\"1.1\"},{\"plugin\":\"org.ekstep.questionunit.ftb\",\"version\":\"1.1\"}]},\"stage\":{\"noOfStages\":2,\"currentStage\":\"2117886e-e529-4255-92db-c9e9ab466d61\",\"selectedPluginObject\":\"ab5eb56a-8aab-4be0-b52a-44a25c37c9d9\"},\"sidebar\":{\"selectedMenu\":\"settings\"}}"
              objectType:
                type: string
                example: Content
              appIcon:
                type: string
                example: "https://sldevsunbird.blob.core.windows.net/sl-dev-assets/content/do_113059728955416576140/artifact/whatsapp-image-2020-05-27-at-4.35.44-pm.jpeg"
              assets:
                type: array
                items:
                  type: string
                example: []
              collections:
                type: array
                items:
                  type: string
                example: ["do_113059753728966656142",
                      "do_113059795214434304147",
                      "do_113059801117532160149"]
              appId:
                type: string
                example: dev.dev.portal
              contentEncoding:
                type: string
                example: gzip
              artifactUrl:
                type: string
                example: "https://sldevsunbird.blob.core.windows.net/sl-dev-assets/content/do_113059727462957056137/artifact/1594207212326_do_113059727462957056137.zip"
              lockKey:
                type: string
                example: "1555968e-24dc-4d9c-8274-91ff8afb216d"
              contentType:
                type: string
                example: Resource
              lastUpdatedBy:
                type: string
                example: "342cba87-e68c-4b6c-9abc-9ee40eecc37f"
              identifier:
                type: string
                example: do_113059727462957056137
              audience:
                type: array
                items:
                  type: string
                example: [Learner]
              visibility:
                type: string
                example: Default
              consumerId:
                type: string
                example: "1546ae3f-84a7-45d7-8d88-ccbbf9d37e3e"
              mediaType:
                type: string
                example: content
              osId:
                type: string
                example: org.ekstep.quiz.app
              languageCode:
                type: array
                items:
                  type: string
                example: [en]
              graph_id:
                type: string
                example: domain
              nodeType:
                type: string
                example: DATA_NODE
              lastPublishedBy:
                type: string
                example: "246266a9-4bae-4bfd-93cf-7d5d249f3de2"
              version:
                type: string
                example: 2
              pragma:
                type: array
                items:
                  type: string
                example: []
              license:
                type: string
                example: CC BY 4.0
              prevState:
                type: string
                example: Review
              size:
                type: string
                example: 931492
              lastPublishedOn:
                type: string
                example: "2020-07-08T11:20:13.179+0000"
              IL_FUNC_OBJECT_TYPE:
                type: string
                example: Content
              name:
                type: string
                example: Copy Feature
              attributions:
                type: array
                items:
                  type: string
                example: [CC-BY]
              status:
                type: string
                example: Live
              totalQuestions:
                type: string
                example: 4
              code:
                type: string
                example: org.sunbird.dk6uQW.copy
              prevStatus:
                type: string
                example: Processing
              origin:
                type: string
                example: do_11305831369286451217
              description:
                type: string
                example: First quiz
              medium:
                type: string
                example: English
              streamingUrl:
                type: string
                example: "https://sldevsunbird.blob.core.windows.net/sl-dev-assets/content/ecml/do_113059727462957056137-latest"
              idealScreenSize:
                type: string
                example: normal
              createdOn:
                type: string
                example: "2020-07-08T10:43:32.598+0000"
              contentDisposition:
                type: string
                example: inline
              lastUpdatedOn:
                type: string
                example: "2020-07-08T11:19:54.959+0000"
              originData:
                type: string
                example: "{\"name\":\"First quiz\",\"copyType\":\"deep\",\"license\":\"CC BY 4.0\",\"organisation\":[\"SLDEV\"]}"
              SYS_INTERNAL_LAST_UPDATED_ON:
                type: string
                example: "2020-07-08T11:20:20.738+0000"
              dialcodeRequired:
                type: string
                example: No
              lastStatusChangedOn:
                type: string
                example: "2020-07-08T11:20:20.730+0000"
              createdFor:
                type: array
                items:
                  type: string
                example: [01305447637218918413]
              creator:
                type: string
                example: SL Reviewer Y
              IL_SYS_NODE_TYPE:
                type: string
                example: DATA_NODE
              os:
                type: array
                items:
                  type: string
                example: [All]
              totalScore:
                type: string
                example: 7
              pkgVersion:
                type: string
                example: 1
              versionKey:
                type: string
                example: 1594207194959
              idealScreenDensity:
                type: string
                example: hdpi
              framework:
                type: string
                example: SLDEV
              s3Key:
                type: string
                example: "ecar_files/do_113059727462957056137/copy-feature_1594207213185_do_113059727462957056137_1.0.ecar"
              lastSubmittedOn:
                type: string
                example: "2020-07-08T10:47:10.418+0000"
              createdBy:
                type: string
                example: "342cba87-e68c-4b6c-9abc-9ee40eecc37f"
              compatibilityLevel:
                type: string
                example: 2
              IL_UNIQUE_ID:
                type: string
                example: do_113059727462957056137
              resourceType:
                type: string
                example: Learn
              node_id:
                type: string
                example: 228
    appVersionCreateRequest:
      type: object
      properties:
        appName:
          description: app Name
          type: string
          example: samiksha
        version:
          description: app version
          type: string
          example: 2.2.8
        releaseType:
          description: app release type
          type: string
          example: minor
        os:
          description: app os
          type: string
          example: android
        text:
          description: text
          type: string
          example: A new version of app is available !!!
        title:
          description: title
          type: string
          example: New update available!!
        status:
          description: app status
          type: string
          example: active
        appType:
          description: app type
          type: string
          example: assessment
        releaseNotes:
          description: app release Notes
          type: string
          example: new feature like image capture is available
    appVersionCreateResponse:
      type: object
      properties:
        message:
          type: string
          example: App version created
        status:
          type: string
          example: 200
        result:
          $ref: '#/components/schemas/appCreateUpdateCommon'
    appNameMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: body
              param:
                type: string
                example: appName
              msg:
                type: string
                example: Name of the app is required
    appVersionUpdateResponse:
      type: object
      properties:
        message:
          type: string
          example: App version updated
        status:
          type: string
          example: 200
        result:
          $ref: '#/components/schemas/appCreateUpdateCommon'
    appCreateUpdateCommon:
      type: object
      properties:
        appName:
          type: string
          example: samiksha
        version:
          type: string
          example: 2.2.8
        releaseType:
          type: string
          example: minor
        os:
          type: string
          example: android
        text:
          type: string
          example: A new version of app is available !!!
        title:
          type: string
          example: New update available!!
        status:
          type: string
          example: active
        appType:
          type: string
          example: assessment
        releaseNotes:
          type: string
          example: new feature like image capture is available
        createdBy:
          type: string
          example: ""
        updatedBy:
          type: string
          example: ""
    appVersionListResponse:
      type: object
      properties:
        message:
          type: string
          example: Lists of app version data
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            $ref: '#/components/schemas/appCreateUpdateCommon'
    appNameMissingInQuery400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: query
              param:
                type: string
                example: appName
              msg:
                type: string
                example: Name of the app is required
    listByEntityTypeResponse:
      type: object
      properties:
        message:
          type: string
          example: List of entities fetched successfully
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              externalId:
                type: string
                example: AP
              name:
                type: string
                example: Andhra Pradesh
              _id:
                type: string
                example: "5e26c2b0d007227fb039d993"
    entityTypeMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: _id
              msg:
                type: string
                example: required Entity type
    subEntityListResponse:
      type: object
      properties:
        message:
          type: string
          example: List of entities fetched successfully
        status:
          type: string
          example: 200
        result:
          type: object
          properties:
            data: 
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5db1dd3e8a8e070bedca6bef
                  entityType:
                    type: string
                    example: school
                  name:
                    type: string
                    example: Sachdeva Convent School, Street No.-5 Sangam Vihar (Wazirabad - Jagatpur Road), Delhi
                  externalId:
                    type: string
                    example: 1207229
                  addressLine1:
                    type: string
                    example: Street No.-5 Sangam Vihar (Wazirabad - Jagatpur Road), Delhi
                  label:
                    type: string
                    example: Sachdeva Convent School, Street No.-5 Sangam Vihar (Wazirabad - Jagatpur Road), Delhi
                  value:
                    type: string
                    example: 5db1dd3e8a8e070bedca6bef
            count:
              type: integer
              example: 6005
    entityIdMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: _id
              msg:
                type: string
                example: required Entity id
    entityDetailsResponse:
      type: object
      properties:
        message:
          type: string
          example: Entity information fetched successfully
        status:
          type: string
          example: 200
        result:
          type: object
          properties:
            _id:
              type: string
              example: 5db1dd3e8a8e070bedca6bef
            entityTypeId:
              type: string
              example: 5d7a290e6371783ceb11064c
            entityType:
              type: string
              example: school
            metaInformation:
              type: object
              properties:
                externalId:
                  type: string
                  example: 1207229
                name:
                  type: string
                  example: Sachdeva Convent School, Street No.-5 Sangam Vihar (Wazirabad - Jagatpur Road), Delhi
                region:
                  type: string
                  example: NORTH
                capital:
                  type: string
                  example: NEW DELHI
            updatedBy:
              type: string
              example: "2be2fd94-f25e-4402-8e36-20907b45c650"
            createdBy:
              type: string
              example: "2be2fd94-f25e-4402-8e36-20907b45c650"
            updatedAt:
              type: string
              example: "2019-10-24T10:16:44.833Z"
            createdAt:
              type: string
              example: "2019-10-24T10:16:44.833Z"
    entitiesListByIdsRequest:
      type: object
      properties:
        entities:
          description: array of entity Ids
          type: array
          items:
            type: string
          example: ["5beaa888af0065f0e0a10515"]
        fields:
          description: fields
          type: array
          items:
            type: string
          example: ["entityType"]
    entitiesArrayMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: body
              param:
                type: string
                example: entities
              msg:
                type: string
                example: required Entity ids
    entitiesListByIdsResponse:
      type: object
      properties:
        message:
          type: string
          example: Entity information fetched successfully
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 5db1dd3e8a8e070bedca6bef
              entityType:
                type: string
                example: school
    subEntitiesRolesResponse:
      type: object
      properties:
        message:
          type: string
          example: Successfully fetched user roles
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 5d6e521066a9a45df3aa891e
              code:
                type: string
                example: HM
              title:
                type: string
                example: Headmaster 
    subEntityTypeListResponse:
      type: object
      properties:
        message:
          type: string
          example: Successfully fetched user roles
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: string
          example: ["district", "block", "cluster", "school"]
    getUsersByEntityAndRoleResponse:
      type: object
      properties:
        message:
          type: string
          example: Successfully fetched user roles
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: object
            properties:
              entityId:
                type: string
                example: 5d6e521066a9a45df3aa891e
              entityExternalId:
                type: string
                example: 17869
              userId:
                type: string
                example: "65ce67e1-40ae-40e8-8c02-961571cd3b46"
    subEntityListBasedOnRoleAndLocationResponse:
      type: object
      properties:
        message:
          type: string
          example: Entities child hierarchy path fetched successfully
        status:
          type: string
          example: 200
        result:
          type: array
          items:
            type: string
          example: ["district", "block", "cluster", "school"]
    userExtensionGetProfileResponse:
      type: object
      properties:
        message:
          type: string
          example: User profile fetched successfully
        status:
          type: string
          example: 200
        result:
          type: object
          properties:
            _id:
              type: string
              example: 5d5e47051f5a363a0a187029
            code:
              type: string
              example: HM
            title:
              type: string
              example: Headmaster
            immediateSubEntityType:
              type: string
              example: school
            entities:
              type: array
              items:
                type: object
                properties:
                  _id: 
                    type: string
                    example: 5bfe53ea1d0c350d61b78d0f
                  externalId:
                    type: string
                    example: 1208138
                  name:
                    type: string
                    example: Shri Shiv Middle School, Shiv Kutti, Teliwara, Delhi
                  childrenCount:
                    type: string
                    example: 0
                  entityType:
                    type: string
                    example: school
                  entityTypeId:
                    type: string
                    example: 5ce23d633c330302e720e65f
                  subEntityGroups:
                    type: array
                    items:
                      type: string
                    example: ["parent"]
    userExtensionUpdateRequest:
      type: object
      properties:
        roles:
          description: role array contain roleId and code
          type: array
          items:
            type: object
            properties:
              roleId:
                description: role Id
                type: string
                example: ObjectId(5d9f31ae84c47946a1f7d35e)
              code:
                description: code
                type: string
                example: CRP
        externalId:
          description: external Id
          type: string
          example: a1@shikshalokam
        status:
          description: status
          type: string
          example: active
    userExtensionUpdateResponse:
      type: object
      properties:
        message:
          type: string
          example: User profile fetched successfully
        status:
          type: string
          example: 200
        result:
          type: object
          properties:
            roles:
              type: array
              items:
                type: string
              example: []
            status:
              type: string
              example: active
            isDeleted:
              type: boolean
              example: false
            devices:
              type: array
              items:
                type: object
                properties:
                  deviceId:
                    type: string
                    example: "eZPYAJ_thEA:APA91bHniRt_Tfax3KIi0yCqykT-w50-KFyhjgBE9derqXRcFuyu2boa8EVcYn1Yt2lan1eoSNlp2hA5h_oRT7W8YAyYKoQAiT6IuYZ9shJKhDNLnCUR2x1cebrJ3JoMwdIoO5H2Oo7T"
                  os:
                    type: string
                    example: "android, android"
                  app:
                    type: string
                    example: diksha survey
                  appType:
                    type: string
                    example: assessment
                  status:
                    type: string
                    example: active
                  activatedAt:
                    type: string
                    example: "2020-08-12T10:27:10.888Z"
            userProfileScreenVisitedTrack:
              type: string
              example: 
            deleted:
              type: boolean
              example: false
            _id:
              type: string
              example: 5f33c3fe39a2e7766b1bef9f
            userId:
              type: string
              example: "01c04166-a65e-4e92-a87b-a9e4194e771d" 
            useexternalIdrId:
              type: string
              example: a1
            createdBy:
              type: string
              example: SYSTEM
            updatedBy:
              type: string
              example: SYSTEM
            updatedAt:
              type: string
              example: "2020-09-07T13:24:32.170Z"
            createdAt:
              type: string
              example: "2020-08-12T10:27:10.895Z"
            improvementProjects:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5f33c3fe39a2e7766b1bef9f
                  name:
                    type: string
                    example: Test-2
                  description:
                    type: string
                    example: improving school library
                  externalId:
                    type: string
                    example: Test-2
                  entityType:
                    type: string
                    example: school
                  entityTypeId:
                    type: string
                    example: 5d15a959e9185967a6d5e8a6
                  rating:
                    type: string
                    example: 4
    userIdMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: path
              param:
                type: string
                example: _id
              msg:
                type: string
                example: required User id
    userExtensionUpdateProfileRolesRequest:
      type: object
      properties:
        stateId:
          description: state Id
          type: string
          example: 5da829874c67d63cca1bd9d0
        roles:
          description: role array 
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 5d7a2d266371783ceb11064e
              entities:
                description: entity Ids
                type: array
                items:
                  type: string
                example: ["5da70ff64c67d63cca1b94e0"]
    userExtensionUpdateProfileRolesResponse:
      type: object
      properties:
        message:
          type: string
          example: User extension updated successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            _id:
              type: string
              example: 5f587db299333547476e8f80
            externalId:
              type: string
              example: a1
            state:
              type: object
              properties:
                _id:
                  type: string
                  example: 5da829874c67d63cca1bd9d0
                name:
                  type: string
                  example: Punjab
            roles:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5d7a2d266371783ceb11064e
                  code:
                    type: string
                    example: SPD
                  title:
                    type: string
                    example: State Project Director
                  immediateSubEntityType:
                    type: string
                    example: school
                  entities:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 5da70ff64c67d63cca1b94e0
                        externalId:
                          type: string
                          example: 3200100201
                        name:
                          type: string
                          example: PUNJAB GPS ASPAL KHURD
                        childrenCount:
                          type: string
                          example: 0
                        entityType:
                          type: string
                          example: school
                        entityTypeId:
                          type: string
                          example: 5d15a959e9185967a6d5e8a6
                        subEntityGroups:
                          type: array
                          items:
                            type: string
                          example: []
                        relatedEntities:
                          type: array
                          items:
                            oneOf:
                              - $ref: '#/components/schemas/relatedEntityState'
                              - $ref: '#/components/schemas/relatedEntityDistrict'
                              - $ref: '#/components/schemas/relatedEntityBlock'
                              - $ref: '#/components/schemas/relatedEntityCluster'
    relatedEntityState:
      type: object
      properties:
        _id:
          type: string
          example: 5da829874c67d63cca1bd9d0
        entityTypeId:
          type: string
          example: 5d7a290e6371783ceb11064c 
        entityType:
          type: string
          example: state
        metaInformation:
          type: object
          properties:
            externalId:
              type: string
              example: PBS
            name:
              type: string
              example: Punjab
    relatedEntityDistrict:
      type: object
      properties:
        _id:
          type: string
          example: 5da829a94c67d63cca1bd9d2
        entityTypeId:
          type: string
          example: 5d15a959e9185967a6d5e8ac 
        entityType:
          type: string
          example: district
        metaInformation:
          type: object
          properties:
            externalId:
              type: string
              example: BARNALA -3
            name:
              type: string
              example: BARNALA
    relatedEntityBlock:
      type: object
      properties:
        _id:
          type: string
          example: 5da829f64c67d63cca1bd9f1
        entityTypeId:
          type: string
          example: 5d15a959e9185967a6d5e8ab 
        entityType:
          type: string
          example: block
        metaInformation:
          type: object
          properties:
            externalId:
              type: string
              example: PJ-BARNALA
            name:
              type: string
              example: BARNALA
    relatedEntityCluster:
      type: object
      properties:
        _id:
          type: string
          example: 5da82a1c4c67d63cca1bdae8
        entityTypeId:
          type: string
          example: 5d15c4ec03cbf959ccabdd2b 
        entityType:
          type: string
          example: cluster
        metaInformation:
          type: object
          properties:
            externalId:
              type: string
              example: PJ-GPS KALEKE
            name:
              type: string
              example: GPS KALEKE
    StateIdMissing400Error:
      type: object
      properties:
        location:
          type: string
        param:
          type: string
        msg:
          type: string
      example:
        - location: body
          param: stateId
          msg: State id is required
    getEntitiesResponse:
      type: object
      properties:
        message:
          type: string
          example: User entities fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5f587db299333547476e8f80
                  name:
                    type: string
                    example: Apple School
    getEntityTypesResponse:
      type: object
      properties:
        message:
          type: string
          example: User entity types fetched successfully.
        status:
          type: integer
          example: 200
        result:
          type: array
          items:
            type: string
          example:  ["school", "smc", "district"]
    listByEntityTypeV2Response:
      type: object
      properties:
        message:
          type: string
          example: List of entities fetched successfully
        status:
          type: string
          example: 200
        result:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  externalId:
                    type: string
                    example: AP
                  name:
                    type: string
                    example: Andhra Pradesh
                  _id:
                    type: string
                    example: "5e26c2b0d007227fb039d993"
            count:
              type: integer
              example: 8
    userExtensionGetProfileV2Response:
      type: object
      properties:
        message:
          type: string
          example: User profile fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: array
          items:
            
            type: object
            properties:
              _id:
                type: string
                example: 5f587db299333547476e8f80
              externalId:
                type: string
                example: a1
              roles:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: 5d7a2d266371783ceb11064e
                    code:
                      type: string
                      example: SPD
                    title:
                      type: string
                      example: State Project Director
                    immediateSubEntityType:
                      type: string
                      example: school
                    entities:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 5da70ff64c67d63cca1b94e0
                          externalId:
                            type: string
                            example: 3200100201
                          name:
                            type: string
                            example: PUNJAB GPS ASPAL KHURD
                          childrenCount:
                            type: string
                            example: 0
                          entityType:
                            type: string
                            example: school
                          entityTypeId:
                            type: string
                            example: 5d15a959e9185967a6d5e8a6
                          subEntityGroups:
                            type: array
                            items:
                              type: string
                            example: []
                          relatedEntities:
                            type: array
                            items:
                              oneOf:
                                - $ref: '#/components/schemas/relatedEntityState'
                                - $ref: '#/components/schemas/relatedEntityDistrict'
                                - $ref: '#/components/schemas/relatedEntityBlock'
                                - $ref: '#/components/schemas/relatedEntityCluster'
    awsGetDownloadableUrlRequest:
      type: object
      properties:
        bucketName: 
          description: bucket Name
          type: string
          example: ""
        filePaths:
          description: file path 
          type: array
          items:
            type: string
          example: []
    awsGetDownloadableUrlResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Url's generated successfully
        result:
          type: array
          items:
            type: object
            properties:
              filePath:
                type: string
                example: "5e1c28a050452374e1cf9841/e97b5582-471c-4649-8401-3cc4249359bb/cdv_photo_117.jpg"
              url:
                type: string
                example: "https://storage.googleapis.com/download/storage/v1/b/sl-dev-storage/o/5e1c28a050452374e1cf9841%2Fe97b5582-471c-4649-8401-3cc4249359bb%2Fcdv_photo_117.jpg?generation=1579240054787924&alt=media"
    bucketNameMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: body
              param:
                type: string
                example: bucketName
              msg:
                type: string
                example: required bucketName field
    awsGetSignedUrlRequest:
      type: object
      properties:
        bucket: 
          description: bucket Name
          type: string
          example: "sl-unnati-storage"
        fileNames:
          description: file Names 
          type: array
          items:
            type: string
          example: [N4X6E2/N4X6E2.png]
    awsGetSignedUrlResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Url generated successfully
        result:
          type: array
          items:
            type: object
            properties:
              file:
                type: string
                example: T9R6Y8/T9R6Y8.png
              url:
                type: string
                example: "https://sl-unnati-storage.s3.ap-south-1.amazonaws.com/qrcode/T9R6Y8/T9R6Y8.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJW4YWQMTNBKD2KTQ%2F20200421%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Date=20200421T024629Z&X-Amz-Expires=1800&X-Amz-Signature=81d593329c96b318f2924b876854e534bf80aef1f10ca80083d74188b46e69de&X-Amz-SignedHeaders=host"
              payload:
                type: object
                properties:
                  sourcePath:
                    type: string
                    example: T9R6Y8/T9R6Y8.png
              cloudStorage:
                type: string
                example: AWS
    bucketMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: body
              param:
                type: string
                example: bucket
              msg:
                type: string
                example: required bucketName field
    awsUploadFileRequest:
      type: object
      properties:
        bucketName: 
          description: bucket Name
          type: string
          example: "sl-unnati-storage"
        filePath:
          description: file path 
          type: string
          example: N4X6E2/N4X6E2.png
        storage:
          description: storage
          type: string
          example: GC
    awsUploadFileResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Url generated successfully
        result:
          type: object
          properties:
            kind:
              type: string
              example: "storage#object"
            id:
              type: string
              example: "sl-dev-storage/my.csv/1590132715837085"
            selfLink: 
              type: string
              example: "https://www.googleapis.com/storage/v1/b/sl-dev-storage/o/my.csv"
            mediaLink:
              type: string
              example: "https://storage.googleapis.com/download/storage/v1/b/sl-dev-storage/o/my.csv?generation=1590132715837085&alt=media"
            name:
              type: string
              example: my.csv
            bucket: 
              type: string
              example: "sl-unnati-storage"
            generation:
              type: string
              example: 1590132715837085
            metageneration:
              type: string
              example: 1
            contentType:
              type: string
              example: "text/csv; charset=utf-8"
            storageClass:
              type: string
              example: REGIONAL
            size:
              type: string
              example: 137
            md5Hash:
              type: string
              example: edPW+5pdDV6cbSl1TkVwLA==
            contentEncoding:
              type: string
              example: gzip
            crc32c:
              type: string
              example: 56+5+A==
            etag:
              type: string
              example: CJ2tsf35xukCEAE=
            timeCreated:
              type: string
              example: "2020-05-22T07:31:55.836Z"
            updated:
              type: string
              example: "2020-05-22T07:31:55.836Z"
            timeStorageClassUpdated:
              type: string
              example: "2020-05-22T07:31:55.836Z"
    azureUploadRequest:
      type: object
      properties:
        bucketName: 
          description: bucket Name
          type: string
          example: "samiksha"
        filePath:
          description: file path 
          type: string
          example: N4X6E2/N4X6E2.png
    azureUploadResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: File uploaded successfully
        result:
          type: object
          properties:
            name:
              type: string
              example: "static/library/drafts.png"
            containerName:
              type: string
              example: samiksha
            location: 
              type: string
              example: "466d6f62-a01e-000b-3f01-72ce0f000000"
    listInAppNotificationsResponse:
      type: object
      properties:
        message:
          type: string
          example: List Of Notifications
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            data:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/notification1'
                  - $ref: '#/components/schemas/notification2'
            count:
              type: integer
              example: 20
    notification1:
      type: object
      properties:
        is_read:
          type: boolean
          example: false
        internal:
          type: boolean
          example: false
        payload:
          type: object
          properties:
            submission_id:
              type: string
              example: 5fc60dde9f84e950f8068870
            entity_name:
              type: string
              example: Apple School
            program_id:
              type: string
              example: 5fc5202fbba21c7039176ad1
            type:
              type: string
              example: institutional
            entity_id:
              type: string
              example: 5beaa888af0065f0e0a10515
            solution_id:
              type: string
              example: 5fc60dc39f84e950f806886e
        appType:
          type: string
          example: assessment
        action:
          type: string
          example: pending
        created_at:
          type: string
          example: "2021-02-07T23:30:00.227Z"
        text:
          type: string
          example: You have a Pending Assessment
        id:
          type: string
          example: 35
        type:
          type: string
          example: Information
        title:
          type: string
          example: Pending Assessment
    notification2:
      type: object
      properties:
        is_read:
          type: boolean
          example: false
        internal:
          type: boolean
          example: false
        payload:
          type: object
          properties:
            type:
              type: string
              example: observation
        appType:
          type: string
          example: assessment
        action:
          type: string
          example: view_only
        created_at:
          type: string
          example: "2021-02-07T23:30:00.227Z"
        text:
          type: string
          example: You have Completed 4 Observations this month!
        id:
          type: string
          example: 33
        type:
          type: string
          example: Information
        title:
          type: string
          example: Congratulations
    unReadCountInAppNotificationsResponse:
      type: object
      properties:
        message:
          type: string
          example: Unread Notification
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            count:
              type: integer
              example: 20
            data:
              type: array
              items:
                type: object
                properties:
                  is_read:
                    type: boolean
                    example: false
                  internal:
                    type: boolean
                    example: true
                  appName:
                    type: string
                    example: samiksha
                  action:
                    type: string
                    example: view_only
                  created_at:
                    type: string
                    example: "2021-02-07T23:30:00.227Z"
                  text:
                    type: string
                    example: A new version 3.0.1 of app is available !!!
                  type:
                    type: string
                    example: Information
                  title:
                    type: string
                    example: New update available!!
                  payload:
                    type: object
                    properties:
                      appVersion:
                        type: string
                        example: 3.0.0
                      updateType:
                        type: string
                        example: major
                      type:
                        type: string
                        example: appUpdate
                      releaseNotes:
                        type: string
                        example: New Library flow .New Programs flow . New Institutions flow
                      os:
                        type: string
                        example: android
                  appType:
                    type: string
                    example: assessment
    markAsReadInAppNotificationsResponse:
      type: object
      properties:
        message:
          type: string
          example: Notification Updated Successfully
        status:
          type: integer
          example: 200
    registerDeviceRequest:
      type: object
      properties:
        deviceId:
          description: device Id
          type: string
          example: "e7AsiSs9Log:APA91bFAB3m24fF-CUuFJwQ7iWgkdD5mDQuS5kn4G0JSL0txZ-QmhLhaeDQAmhKKf45eWjwMRV0wEM781Jt5C3beKJE_DDLFFasrdpQkmjxh1PMf4NdJgfRg7cnnGNo5EEUUhhkugftTGBo3Lu"
    registerDeviceResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            samiksha-allusers:
              type: string
              example: Subscribed
            samiksha-android-allusers:
              type: string
              example: Subscribed
            samiksha-ios-allusers:
              type: string
              example: Subscribed
    deviceIdMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: body
              param:
                type: string
                example: deviceId
              msg:
                type: string
                example: required deviceId
    gcpGetSignedUrlResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Url generated successfully
        result:
          type: array
          items:
            type: object
            properties:
              fileNames:
                type: string
                example: T9R6Y8/T9R6Y8.png
              url:
                type: string
                example: "https://storage.googleapis.com/sl-dev-storage/qrcode/R2I3A5/R2I3A5.png?GoogleAccessId=sl-dev-storage%40shikshalokam.iam.gserviceaccount.com&Expires=1587437414&Signature=N7yg1ixFXPG14vOxw7zPxMSm98qDoeY7IYtB8iRnSQRYTNwWRfAT7MqvLT3HW9iXexABEhhWPEDhVQt0J42BzY1it3mFMV1C9xgCl8Q%2BhuMVY746GIdapGEJEhicMGIeEVRy%2FItfuNg9UxcZyk1M3TU%2FEabQLCjAgMthnUvQ8tCqiH%2B1t%2FcJDODAvLv96sQVbO%2Fg4aW%2Bz3GGmtx39Kq%2FRTWVgxLBWu5wPs5PuDq7Xg6HSiD9peQylb7wRStkkuRP%2FMyjIhOuQTtgzPdNFV26I5WZu2Eu2EM5Hx6vDAYjXTOHuOry8fX6od5gcHMSjo9J645nNcN8tb97BIuG%2BgKOcg%3D%3D"
              payload:
                type: object
                properties:
                  sourcePath:
                    type: string
                    example: T9R6Y8/T9R6Y8.png
              cloudStorage:
                type: string
                example: GC
    TargetedSolutionsResponse:
      type: object
      properties:
        message: 
          type: string
          example: Solutions fetched successfully
        status:
          type: integer
          example: 200
        result:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  _id: 
                    type: string
                    example: 5f9288fd5e25636ce6dcad66
                  name: 
                    type: string
                    example: obs1
                  description: 
                    type: string
                    example: observation1
                  solutionId: 
                    type: string
                    example: 5f9288fd5e25636ce6dcad65
                  programId: 
                    type: string
                    example: 5d287326652f311044f41dbb
            count:
              type: string
              example: 1
    SolutionTypeMissing400Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: array
          items:
            type: object
            properties:
              location:
                type: string
                example: query
              param:
                type: string
                example: type
              msg:
                type: string
                example: required solution type
    FilepreSignedUrlsRequest:
      type: object
      properties:
        request: 
          type: object
          properties: 
            5f72f9998925ec7c60f79a91: 
              type: object
              properties: 
                files: 
                  type: array
                  items: 
                    type: string
                    example: uploadFile.jpg
        ref: 
          type: string
          example: survey
    FilesGetSignedUrlResponse:
      type: object
      properties:
        message: 
          type: string
          example: File upload urls generated successfully.
        status: 
          type: integer
          format: int32
          example: 200
        result: 
          type: object
          properties: 
            5f72f9998925ec7c60f79a91: 
              type: object
              properties: 
                files: 
                  type: array
                  items: 
                    type: object
                    properties: 
                      file: 
                        type: string
                        example: uploadFile.jpg
                      url: 
                        type: string
                        example: https://storage.googleapis.com/sl-dev-storage/01c04166-a65e-4e92-a87b-a9e4194e771d/5f72f9998925ec7c60f79a91/cd6763c9-a64a-4241-9907-4365970e8d11_uploadFile.jpg?GoogleAccessId=sl-dev-storage%40shikshalokam.iam.gserviceaccount.com&Expires=1605698490&Signature=ej6WHNOyx6EvUbAi81pDcYb3YqM7dkAhNT1Ktsf%2FTiRhwL%2ByhS89E1zRspIYlVOutlzoZXgRAl%2Fd0y%2BQcdryWYgfVAKAZmJVZtK3oVisLxhkFCKYeHAbzZ%2FadkCXdU3e1AVJGyRvKoN04Yr84%2BIa%2F1ApszOYDmVT%2Fn%2FOi4JSScbvzhe82bSe5xEr%2FPDwDq48%2FKgUhAc0faP%2FlAA2Wf7V1Ifuxc3quw9OpzvND8CKuugXZ%2FDZ6mhF0O80IXwP%2BFJOn4u9ydHqwXM3zDRDOO0WMh6VBLuvRFBRwJsrJG3v5zZMw0r5cYOIvkW4Tqo%2FefpXUDsvCVBTlZ9zBEdwx2Jshw%3D%3D
                      payload: 
                        type: object
                        properties: 
                          sourcePath: 
                            type: string
                            example: 01c04166-a65e-4e92-a87b-a9e4194e771d/5f72f9998925ec7c60f79a91/cd6763c9-a64a-4241-9907-4365970e8d11_uploadFile.jpg
    TargetedEntityResponse:
      type: object
      properties: 
        message: 
          type: string
          example: Targeted entity fetched successfully
        status: 
          type: integer
          format: int32
          example: 200
        result: 
          type: object
          properties: 
            _id: 
              type: string
              example: 5fd098e2e049735a86b748ad
            entityType: 
              type: string
              example: district
            entityName: 
              type: string
              example: VIZIANAGARAM
              
    ProgramsByPlatformRoleslResponse:
      type: object
      properties:
        message: 
          type: string
          example: Mapped user program fetched successfully
        status: 
          type: integer
          format: int32
          example: 200
        result: 
          type: array
          items: 
            type: object
            properties: 
              _id: 
                type: string
                example: 5f34e44681871d939950bca6
              externalId: 
                type: string
                example: TN-Program-1597301830708
              description: 
                type: string
                example: TN01-Mantra4Change-APSWREIS School Leader Feedback
              name: 
                type: string
                example: TN-Program
              role”: 
                type: string
                example: PM 
                
    SolutionsByPlatformRoleslResponse:
      type: object
      properties:
        message: 
          type: string
          example: Mapped user program fetched successfully
        status: 
          type: integer
          format: int32
          example: 200
        result: 
          type: array
          items: 
            type: object
            properties: 
              _id: 
                type: string
                example: 5f34e44681871d939950bca6
              externalId: 
                type: string
                example: TN-Program-1597301830708
              description: 
                type: string
                example: TN01-Mantra4Change-APSWREIS School Leader Feedback
              name: 
                type: string
                example: TN-Program
              type: 
                type: string
                example: observation
              subType: 
                type: string
                example: school
              isRubricDriven: 
                type: boolean
 
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header    
      
    
