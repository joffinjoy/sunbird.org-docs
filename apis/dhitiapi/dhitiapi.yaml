openapi: 3.0.1
info:
  title: Dhiti Service API(s)
  termsOfService: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
  description: >-
    - The Dhiti Service is to generate reports. Apis perform operations related to generating app reports and pdf reports etc 
    
    - The URL for dhiti service API(s) is `dhiti/api`

    - <b>Note:</b> These resources can be used in other services 
  contact: {}
  version: '1.0'
servers:
- url: https://staging.open-sunbird.org/dhiti/api
  variables: {}
paths: 
  /v1/programs/list:
    post:
      tags:
      - Program API's
      summary: Get List of Programs
      description: This API is used for getting list of programs.
           - The endpoint for **Program List  V1** is `/programs/list`  
      operationId: Get List of Programs
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProgramListRequest"
      responses:
        200:
          description: "Program List"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramListResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramList400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/solutions/list:
    post:
      tags:
      - Solution API's
      summary: Get List of solutions
      description: This API is used for getting list of solutions.
           - The endpoint for **Solution List  V1** is `/solutions/list`  
      operationId: Get List of Solutions
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId,entityType and programId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SolutionListRequest"
      responses:
        200:
          description: "Solution List"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionListResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionList400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/surveys/solutionReport:
    get:
      tags:
      - Survey API's
      summary: Get Survey Solution Report
      description: This API is used for getting Survey solution report.
           - The endpoint for **Survey solution report  V1** is `/surveys/solutionReport`  
      operationId: Survey 
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - in: query
          name: solutionId
          required: true
          description: solutionId for which report will be generated
          schema:
            type: string
      responses:
        200:
          description: "Survey Solution Report"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySolutionReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySolutionReport400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/surveys/getAllResponsesOfQuestion:
    post:
      tags:
      - Survey API's
      summary: Get all responses for the given questionId
      description: This API is used for getting all the response of a question.
           - The endpoint for **Survey  getAllResponsesOfQuestion  V1** is `/surveys/getAllResponsesOfQuestion`  
      operationId: Get all responses for the given questionId
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SurveyGetAllResponsesOfQuestionRequest"
      responses:
        200:
          description: "Get All Responses Of a Question"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyGetAllResponsesOfQuestionResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyGetAllResponsesOfQuestion400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/surveys/submissionReport:
    get:
      tags:
      - Survey API's
      summary: Get Survey Solution Report
      description: This API is used for getting Survey submission report.
           - The endpoint for **Survey submission report  V1** is `/surveys/submissionReport`  
      operationId: Survey API's
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - in: query
          name: submissionId
          required: true
          description: submissionId for which report will be generated
          schema:
            type: string
      responses:
        200:
          description: "Survey Submission Report"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySolutionReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySubmissionReport400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/surveys/listAllEvidences:
    post:
      tags:
      - Survey API's
      summary: List all evidences of question
      description: This API is used for getting all the evidences of a question.
           - The endpoint for **Survey listAllEvidences  V1** is `/surveys/listAllEvidences`  
      operationId: survey 
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SurveyListAllEvidenceRequest"
      responses:
        200:
          description: "Survey Submission Report"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllEvidencesResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySubmissionReport400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/improvement-project/viewProjectReport:
    post:
      tags:
      - Improvement Project API's
      summary: View project report
      description: This API is used for view project report.
           - The endpoint for **viewProjectReport V1** is `/improvement-project/viewProjectReport`  
      operationId: View project report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/viewProjectReportRequest"
      responses:
        200:
          description: "viewProjectReport Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewProjectReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/improvement-project/entityReport:
    post:
      tags:
      - Improvement Project API's
      summary: entity report
      description: This API is used for getting entity report.
           - The endpoint for **entityReport V1** is `/improvement-project/entityReport`  
      operationId: entity report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/entityReportRequest"
      responses:
        200:
          description: "viewProjectReport Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewProjectReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/assessments/listPrograms:
    post:
      tags:
      - Assessments API's
      summary: List assessment programs
      description: This API is used for getting list of assessment programs.
           - The endpoint for **listPrograms V1** is `/assessments/listPrograms`  
      operationId: List assessment programs
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId, immediateChildType and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/listProgramsRequest"
      responses:
        200:
          description: "viewProjectReport Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listProgramsResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/assessments/entity:
    post:
      tags:
      - Assessments API's
      summary: Entity assessment
      description: This API is used for getting entity assessment.
           - The endpoint for **entity V1** is `/assessments/entity`  
      operationId: Entity assessment
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId, progarmId, solutionId, immediateChildEntityType and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/entityRequest"
      responses:
        200:
          description: "viewProjectReport Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/assessments/listAssessmentPrograms:
    post:
      tags:
      - Assessments API's
      summary: List assessment programs
      description: This API is used for getting list of assessment programs.
           - The endpoint for **listAssessmentPrograms V1** is `/assessments/listAssessmentPrograms`  
      operationId: List assessment programs2
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      responses:
        200:
          description: "viewProjectReport Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAssessmentProgramsResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/assessments/listEntities:
    post:
      tags:
      - Assessments API's
      summary: List entities
      description: This API is used for getting list of entities.
           - The endpoint for **listEntities V1** is `/assessments/listEntities`  
      operationId: List entities
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the programId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/listEntitiesRequest"
      responses:
        200:
          description: "List entities Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listEntitiesResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/assessments/listImprovementProjects:
    post:
      tags:
      - Assessments API's
      summary: List improvement programs
      description: This API is used for getting list of improvement programs.
           - The endpoint for **listImprovementProjects V1** is `/assessments/listImprovementProjects`  
      operationId: List improvement programs
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId, progarmId, solutionId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/listImprovementProjectsRequest"
      responses:
        200:
          description: "List entities Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listImprovementProjectsResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/assessments/entityReport:
    post:
      tags:
      - Assessments API's
      summary: entity level assessment report
      description: This API is used for getting entity level assessment report.
           - The endpoint for **entityReport V1** is `/assessments/entityReport`  
      operationId: entity level assessment report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId, progarmId, solutionId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/listImprovementProjectsRequest"
      responses:
        200:
          description: "viewProjectReport Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assessmentEntityReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/unnati/pdfReport:
    post:
      tags:
      - Unnati API's
      summary: Project pdf report
      description: This API is used for getting project pdf report.
           - The endpoint for **pdfReport V1** is `/unnati/pdfReport`  
      operationId: Project pdf report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the title, goal, duration, status, startDate, endDate, category and tasks
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/unnatiPdfReportRequest"
      responses:
        200:
          description: "Project pdf report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/unnati/monthlyReport:
    post:
      tags:
      - Unnati API's
      summary: Monthly report
      description: This API is used for getting Monthly report.
           - The endpoint for **monthlyReport V1** is `/unnati/monthlyReport`  
      operationId: Monthly report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the schoolName, reportType, projectDetails, title and tasks
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/monthlyReportRequest"
      responses:
        200:
          description: "Project pdf report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/unnati/viewProjectReport:
    post:
      tags:
      - Unnati API's
      summary: View project report
      description: This API is used for view project report.
           - The endpoint for **viewProjectReport V1** is `/unnati/viewProjectReport`  
      operationId: Unnati View project report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the schoolName, reportType and projectDetails
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/unnatiViewProjectReportRequest"
      responses:
        200:
          description: "Project pdf report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/unnati/addTaskReport:
    post:
      tags:
      - Unnati API's
      summary: Add task report
      description: This API is used for getting add task report.
           - The endpoint for **addTaskReport V1** is `/unnati/addTaskReport`  
      operationId: Add task report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the projectName, goal, duration, assigneeName, startDate and tasks
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addTaskReportRequest"
      responses:
        200:
          description: "Project pdf report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/instance:
    post:
      tags:
      - Observations API's
      summary: Get Observation Instance report
      description: This API is used for getting instance (submission) report.
           - The endpoint for **Observation instance report V1** is `/observations/instance`  
      operationId: Get Instance Report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the submissionId and questionId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceObservationRequest"
      responses:
        200:
          description: "Program List"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceObservationResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySubmissionReport400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/observations/instanceObservationScoreReport:
    post:
      tags:
      - Observations API's
      summary: Instance observation score report
      description: This API is used for getting instance observation score report.
           - The endpoint for **instanceObservationScoreReport V1** is `/observations/instanceObservationScoreReport`  
      operationId: Instance observation score report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the submissionId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceObservationRequest"
      responses:
        200:
          description: "Instance observation score report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceObservationScoreReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/entity:
    post:
      tags:
      - Observations API's
      summary: Entity observation report
      description: This API is used for getting entity observation report.
           - The endpoint for **entity V1** is `/observations/entity`  
      operationId: Entity observation report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and observationId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/entityObservationReportRequest"
      responses:
        200:
          description: "Instance observation score report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityObservationReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/entityObservationReport:
    post:
      tags:
      - Observations API's
      summary: Entity observation report(cluster/zone/district/state)
      description: This API is used for getting entity observation report (cluster/zone/district/state).
           - The endpoint for **entityObservationReport V1** is `/observations/entityObservationReport`  
      operationId: Entity observation report(cluster/zone/district/state)
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId, entityType, immediateChildEntityType and observationId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/observationEntityReportRequest"
      responses:
        200:
          description: "Instance observation score report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/observationEntityReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/entitySolutionReport:
    post:
      tags:
      - Observations API's
      summary: Solution report of an entity
      description: This API is used for getting entity solution report.
           - The endpoint for **entitySolutionReport V1** is `/observations/entitySolutionReport`  
      operationId: Entity solution report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId, entityType, immediateChildEntityType and solutionId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityObservationSolutionReportRequest"
      responses:
        200:
          description: "Entity solution report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityObservationSolutionReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
                
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySolutionReport400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/entityScoreReport:
    post:
      tags:
      - Observations API's
      summary: Entity observation score report
      description: This API is used for getting entity observation score report
           - The endpoint for **entityScoreReport V1** is `/observations/entityScoreReport`  
      operationId: Entity observation score report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and observationId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/entityScoreReportRequest"
      responses:
        200:
          description: "Instance observation score report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityScoreReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/report:
    post:
      tags:
      - Observations API's
      summary: Observation report
      description: This API is used for getting Observation level report.
           - The endpoint for **Observation report V1** is `/observations/report`  
      operationId: Observation report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the observationId and questionId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationReportRequest"
      responses:
        200:
          description: "Observation report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityObservationReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationReport400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/scoreReport:
    post:
      tags:
      - Observations API's
      summary: Observation score report
      description: This API is used for getting Observation score report.
           - The endpoint for **Observation score report V1** is `/observations/scoreReport`  
      operationId: Observation score report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the observationId and questionId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationReportRequest"
      responses:
        200:
          description: "Observation score report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationScoreReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationReport400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/listObservationNames:
    post:
      tags:
      - Observations API's
      summary: List observation names
      description: This API is used for listing Observation names based on entityId and type.
           - The endpoint for ** List observation names V1** is `/observatations/listObservationNames`  
      operationId: List observation names
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListObservationNamesRequest"
      responses:
        200:
          description: "List of observation names for the give entityId and entityType"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObservationNamesResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObservationNames400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/listObservationSolutions:
    post:
      tags:
      - Observations API's
      summary: List observation solutions
      description: This API is used for listing Observation solutions based on entityId and type
           - The endpoint for ** List observation solutions V1** is `/observatations/listObservationSolutions`  
      operationId: List observation solutions
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and entityType
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListObservationNamesRequest"
      responses:
        200:
          description: "List of observation solutions for the given entityId and entityType"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObservationSolutionsResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObservationNames400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/submissionsCount:
    post:
      tags:
      - Observations API's
      summary: Number of submissions for the entity / observation
      description: This API is used for getting observation submissions count for the entity/ observation
           - The endpoint for **SubmissionsCount V1** is `/observatations/submissionsCount`  
      operationId: Get observation submission count
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId and observationId or only observationId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionCountRequest"
      responses:
        200:
          description: "Get number of submission count for the given entityId and observationId"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionCountResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionCount400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/pdfReports:
    get:
      tags:
      - Observations API's
      summary: PDF reports for submission / entity / observation / solution level
      description: This API is used for getting observation pdf reports
           - The endpoint for **PdfReports V1** is `/observatations/pdfReports`  
      operationId: Get  pdf reports
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: submissionId
          in: query
          required: true
          description:  submissionId / entityId and observationId / observationId / entityId and entityType and solutionId combinations can be passed to get pdf reports
          schema:
            type: string
      responses:
        200:
          description: "observation pdf reports url"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationPdfReports400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/observationScorePdfReport:
    post:
      tags:
      - Observations API's
      summary: Observation score PDF reports for submission / entity / observation / solution level
      description: This API is used for getting observation score pdf reports
           - The endpoint for **ObservationScorePdfReport V1** is `/observatations/observationScorePdfReport`  
      operationId: Get observation score pdf reports
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the submissionId / entityId and observationId / observationId / entityId, entityType, solutionId and reportType 
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationPdfReportRequest"
      responses:
        200:
          description: "observation score pdf reports url"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationPdfReports400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/instanceReportByCriteria:
    post:
      tags:
      - Observations API's
      summary: Get observation instance Criteria wise report
      description: This API is used for getting instance (submission) criteria wise report.
           - The endpoint for **Observation instance criteria report V1** is `/observations/instanceReportByCriteria`  
      operationId: Get Instance Criteria wise Report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the submissionId and questionId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceCriteriaReportRequest"
      responses:
        200:
          description: "Program List"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceReportByCriteriaResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySubmissionReport400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v1/observations/instanceScoreReportByCriteria:
    post:
      tags:
      - Observations API's
      summary: Instance observation score report by criteria
      description: This API is used for getting instance observation score criteria wise report.
           - The endpoint for **instanceScoreReportByCriteria V1** is `/observations/instanceScoreReportByCriteria`  
      operationId: Instance observation score criteria wise report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the submissionId and questionId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceCriteriaReportRequest"
      responses:
        200:
          description: "Instance observation score report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceScoreReportByCriteriaResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/entityReportByCriteria:
    post:
      tags:
      - Observations API's
      summary: Entity observation criteria wise report 
      description: This API is used for getting entity observation criteria wise report.
           - The endpoint for **entityReportByCriteria V1** is `/observations/entityReportByCriteria`  
      operationId: Entity observation criteria wise report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId, observationId, entityType and criteriaId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityReportByCriteriaRequest"
      responses:
        200:
          description: "Entity observation report by criteria Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityReportByCriteriaResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityReportByCriteria400Error'
                
      deprecated: false
      security:
        - bearer: []
  /v1/observations/entityScoreReportByCriteria:
    post:
      tags:
      - Observations API's
      summary: Entity observation score criteria wise report 
      description: This API is used for getting entity observation score criteria wise report.
           - The endpoint for **entityScoreReportByCriteria V1** is `/observations/entityScoreReportByCriteria`  
      operationId: Entity observation score criteria wise report
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId,observationId,entityType and criteriaId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityReportByCriteriaRequest"
      responses:
        200:
          description: "Entity observation score report by criteria Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityScoreReportByCriteriaResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityReportByCriteria400Error'
                
      deprecated: false
      security:
        - bearer: []
  /v1/observations/observationReportByCriteria:
    post:
      tags:
      - Observations API's
      summary: Observation report by criteria
      description: This API is used for getting Observation report by criteria wise.
           - The endpoint for **observationReportByCriteria report V1** is `/observations/observationReportByCriteria`  
      operationId: Observation report by criteria
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the observationId and criteriaId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationReportByCriteriaRequest"
      responses:
        200:
          description: "Observation criteria wise report  Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationReportByCriteriaResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationReport400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/observationScoreReportByCriteria:
    post:
      tags:
      - Observations API's
      summary: Observation score criteria wise report
      description: This API is used for getting Observation score criteria wise report.
           - The endpoint for **observationScoreReportByCriteria score report V1** is `/observations/observationScoreReportByCriteria`  
      operationId: Observation score criteria wise report 
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the observationId and criteriaId filter
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationReportByCriteriaRequest"
      responses:
        200:
          description: "Observation score report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/observationScoreReportByCriteriaResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationReport400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/pdfReportsByCriteria:
    post:
      tags:
      - Observations API's
      summary: Observation criteria wise PDF reports for submission / entity / observation level
      description: This API is used for getting observation criteria wise pdf reports
           - The endpoint for **PdfReportsByCriteria V1** is `/observatations/pdfReportsByCriteria`  
      operationId: Get observation criteria wise pdf reports
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the submissionId / entityId and observationId / observationId 
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationPdfReportRequest"
      responses:
        200:
          description: "observation criteria wise reports url"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationPdfReports400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/scorePdfReportsByCriteria:
    post:
      tags:
      - Observations API's
      summary: Observation score criteria wise PDF reports for submission / entity / observation level
      description: This API is used for getting observation score criteria wise pdf reports
           - The endpoint for **ScorePdfReportsByCriteria V1** is `/observatations/scorePdfReportsByCriteria`  
      operationId: Get observation score criteria wise pdf reports
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the submissionId / entityId and observationId / observationId 
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationPdfReportRequest"
      responses:
        200:
          description: "observation score criteria wise reports url"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationPdfReports400Error'
      deprecated: false
      security:
        - bearer: []
  /v1/observations/listAllEvidences:
    post:
      tags:
      - Observations API's
      summary: List all evidences of submission/entity/observation question
      description: This API is used for getting all the evidences of a question
           - The endpoint for **Observation listAllEvidences  V1** is `/observations/listAllEvidences`  
      operationId: List all evidences of a question
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the questionId, submissionId / entityId and observationId / observationId  
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationListAllEvidenceRequest"
      responses:
        200:
          description: "Survey Submission Report"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllEvidencesResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationListAllEvidence400Error'
        
      deprecated: false
      security:
        - bearer: []
  /v2/observations/pdfReports:
    post:
      tags:
      - Observations API's
      summary: PDF reports for submission / entity / observation / solution level
      description: This API is used for getting observation pdf reports for the given input
           - The endpoint for **PdfReports V2** is `/observatations/pdfReports`  
      operationId: Get  observation pdf reports
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the submissionId / entityId and observationId / observationId / entityId, entityType, solutionId and reportType 
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationPdfReportRequest"
      responses:
        200:
          description: "observation pdf reports url"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unnatiPdfReportResponse'
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationPdfReports400Error'
      deprecated: false
      security:
        - bearer: []
  /v2/observations/entitySolutionReport:
    post:
      tags:
      - Observations API's
      summary: Solution report of an entity
      description: This API is used for getting entity solution report.
           - The endpoint for **entitySolutionReport V2** is `/observations/entitySolutionReport`  
      operationId: Entity solution report V2
      parameters:
        - name: X-auth-token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
            - The body payload comprises of the entityId, entityType, immediateChildEntityType and solutionId
            - The body parameter refers to the format of the request, the request body (payload) takes the following media types to 
              payload:
                json
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityObservationSolutionReportRequest"
      responses:
        200:
          description: "Entity solution report Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityObservationSolutionReportResponse'
           
        500:
          description: "'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
                
        400:
          description: 'BAD REQUEST. The operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySolutionReport400Error'
      deprecated: false
      security:
        - bearer: []
  
components:
  schemas:
   
    500Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: Internal Server Error
        
    ProgramList400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: entityId and entityType are required fields
          
    ProgramListRequest:
      type: object
      required:
        - entityId
        - entityType
      properties:
        entityId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        entityType:
          type: string
          example: school
          
    ProgramListResult:
      type: object
      properties:
        programId:
          type: string
        programName:
          type: string
      example:
        programId: 5ff444f3addbc0493ecf189b
        programName: DCPCR program
        
    ProgramListResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        data: 
          type: array
          items:
            $ref: '#/components/schemas/ProgramListResult'
            
    SolutionListRequest:
      type: object
      required:
        - entityId
        - entityType
        - programId
      properties:
        entityId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        entityType:
          type: string
          example: school
        programId:
          type: string
          example: 5bbd83b545cfa47ab52d760b
          
    SolutionListResult:
      type: object
      properties:
        solutionId:
          type: string
        solutionName:
          type: string
        type:
          type: string
        scoring:
          type: boolean
        id:
          type: string
      example:
        solutionId: 5ff444f3addbc0493ecf189b
        programName: CRP Visiting Form -june 26
        type: observation
        scoring: false
        id: 01c04166-a65e-4e92-a87b-a9e4194e771d
        
    SolutionListResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        data: 
          type: object
          properties:
            mySolutions:
              type: array
              items:
                $ref: '#/components/schemas/SolutionListResult'
            allSolutions:
              type: array
              items:
                $ref: '#/components/schemas/SolutionListResult'
                
    SolutionList400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: entityId,entityType,programId are required fields
          
    EvidenceArray:
      type: object
      properties:
        url:
          type: string
          example: 5f6b0f8626e1b91d91c44bad/tmp_2020-8-22-13850488768898328338.jpg
        extension:
          type: string
          example: jpg
          
    SurveySolutionReportResult:
      type: object
      properties:
        order: 
          type: string
          example: "q1_1567899877"
        question: 
          type: string
          example: Did you like the training session?
        responseType: 
          type: string
          example: radio
        answers: 
          type: array
          items:
             $ref: ''
          example:
            ["yes"]
        instanceQuestions:
          type: array
          items:
            $ref: ''
          example: []
        chart: 
          type: object
        evidences:
          type: array
          items:
             $ref: '#/components/schemas/EvidenceArray'
             
    SurveySolutionReportResponse:
      type: object
      properties:
        solutionName:
          type: string
          example: CRP Visiting Form -june 26
        response: 
          type: array
          items:
            $ref: '#/components/schemas/SurveySolutionReportResult'
            
    SurveySolutionReport400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: solutionId is a required field
          
    SurveyGetAllResponsesOfQuestionRequest:
      type: object
      required:
        - solutionId
        - questionExternalId
      properties:
        solutionId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        questionExternalId:
          type: string
          example: SA5015-1608719629286
        completedDate:
          type: string
          example: "2015-07-28T01:00:00.000Z"
          
    SurveyGetAllResponsesOfQuestionResponse:
      type: object
      properties:
        question: 
          type: string
          example: How many children are there in class
        answers:
          type: array
          items:
             $ref: ''
          example: [9,10]
        completedDate:
          type: string
          example: "2015-07-28T01:00:00.000Z"
          
    SurveyGetAllResponsesOfQuestion400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: solutionId, questionExternalId and completedDate are required fields
        
    SurveySubmissionReport400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: submissionId is a required field
    
    SurveyListAllEvidenceRequest:
      type: object
      properties:
        solutionId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        submissionId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        questionId:
          type: string
          example: SA5015-1608719629286
          
    viewProjectReportRequest:
      type: object
      required:
        - schoolName
        - reportType
        - projectDetails
      properties:
        schoolName:
          type: string
          example: ""
        reportType:
          type: string
          example: ""
        projectDetails:
          type: string
          example: []
    
    viewProjectReportResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "report generated"
        pdfUrl:
          type: string
          example: "http://localhost:4201/dhiti/api/v1/observations/pdfReportsUrl?id=dG1wLzczMmM5MzhkLTRiOWUtNGRhMS1iMGUxLWQ4NjRjNjUwNDliMC0tMzcxNw=="
    
    entityReportRequest:
      type: object
      properties:
        entityName:
          type: string
          example: ""
        programName:
          type: string
          example: ""
        sharedBy:
          type: string
          example: ""
        reportType:
          type: string
          example: ""
        categories:
          $ref: '#/components/schemas/viewProjectReportCategoryRequest'
        tasks:
          $ref: '#/components/schemas/viewProjectReportTasksRequest'
        projects:
          $ref: '#/components/schemas/viewProjectReportTasksRequest'

    viewProjectReportCategoryRequest:
      type: object
      properties:
        total:
          type: string
        null:
          type: string
        Teachers:
          type: string
        Students:
          type: string
        Infrastructure:
          type: string
        ui:
          type: string
        Community:
          type: string
        Othersr:
          type: string
      example: {
        "total": 7,
        "null": 2,
        "Teachers": 2,
        "Students": 2,
        "Infrastructure": 2,
        "ui": 1,
        "Community": 1,
        "Othersr": 1
      }
      
    viewProjectReportTasksRequest:
      type: object
      properties:
        total:
          type: string
        completed:
          type: string
        inProgress:
          type: string
        notStarted:
          type: string
        overdue:
          type: string
        not started:
          type: string
      example: {
        "total": 2,
        "completed": 0,
        "inProgress": 0,
        "notStarted": 1,
        "overdue": 0,
        "not started": 1
      }
      
    listProgramsResponse:
      type: object
      properties:
        programName:
          type: string
          example: ""
        programId:
          type: string
          example: ""
        programDescription:
          type: string
          example: ""
        programExternalId:
          type: string
          example: ""
        solutions:
          $ref: '#/components/schemas/listProgramsSolutionsResponse'
    
    listProgramsSolutionsResponse:
      type: object
      properties:
        solutionName:
          type: string
        solutionId:
          type: string
        solutionDescription:
          type: string
        solutionExternalId:
          type: string
      example: {
        "solutionName": "",
        "solutionId": "",
        "solutionDescription": "",
        "solutionExternalId": "",
      }
      
    listProgramsRequest:
      type: object
      properties:
        entityId:
          type: string
        entityType:
          type: string
        immediateChildType:
          type: string
      example: {
        "entityId": "",
        "entityType": "",
        "immediateChildType": ""
      }
      
    entityRequest:
      type: object
      properties:
        entityId:
          type: string
        entityType:
          type: string
        progarmId:
          type: string
        solutionId:
          type: string
        immediateChildEntityType:
          type: string
      example: {
        "entityId": "",
        "entityType": "",
        "progarmId": "",
        "solutionId": "",
        "immediateChildEntityType": ""
      }
    
    entityResponse:
      type: object
      properties:
        result:
          type: string
          example: true
        title:
          type: string
          example: ""
        reportSections:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/entityResponseReportSection'
            - $ref: '#/components/schemas/entityResponseReportSection2'
    
    entityResponseReportSection:
      type: object
      properties:
        order:
          type: string
          example: ""
        chart:
          $ref: '#/components/schemas/entityResponseChart'

    entityResponseChart:
      type: object
      properties:
        type:
          type: string
          example: ""
        nextChildEntityType:
          type: string
          example: ""
        stacking:
          type: string
          example: ""
        title:
          type: string
          example: ""
        xAxis:
          type: object
          example: {
            "categories": [],
            "title": "",
          }
        yAxis:
          type: object
          example: {
            "title": {
              "text": ""
            }
          }
        data:
          type: array
          items:
            type: object
          example: [{
             "name": "",
             "data": []
          }]
          
    entityResponseReportSection2:
      type: object
      properties:
        order:
          type: string
          example: ""
        chart:
          $ref: '#/components/schemas/entityResponseChart2'

    entityResponseChart2:
      type: object
      properties:
        type:
          type: string
          example: ""
        title:
          type: string
          example: ""
        entities:
          type: array
          items:
            $ref: '#/components/schemas/entityResponseChart2Entities'
     
    entityResponseChart2Entities:
      type: object
      properties:
        entityName:
          type: string
          example: ""
        entityId:
          type: string
          example: ""
        domains:
          type: array
          items:
            $ref: '#/components/schemas/entityResponseChart2Domains'
            
    entityResponseChart2Domains:
      type: object
      properties:
        domainName:
          type: string
          example: ""
        domainId:
          type: string
          example: ""
        criterias:
          type: array
          items:
            type: object
          example: [{
              "name": "",
              "level": ""
          }]
          
    listAssessmentProgramsResponse:
      type: object
      properties:
        result:
          type: string
          example: true
        data:
          type: array
          items:
            type: object
            properties:
              programName:
                type: string 
                example: ""
              programId:
                type: string 
                example: ""
            
    listEntitiesRequest:
      type: object
      properties:
        programId:
          type: string
          example: ""
          
    listEntitiesResponse:
      type: object
      properties:
        result:
            type: string
            example: true
        data:
          type: array
          items:
            type: object
            properties:
              entityId:
                type: string 
                example: ""
              entityName:
                type: string 
                example: ""
              entityType:
                type: string 
                example: ""
              solutions:
                type: array
                items:
                  type: object
                  properties:
                    solutionId:
                      type: string 
                      example: ""
                    solutionName:
                      type: string 
                      example: ""
    
    listImprovementProjectsRequest:
      type: object
      properties:
        entityId:
          type: string
        entityType:
          type: string
        progarmId:
          type: string
        solutionId:
          type: string
      example: {
        "entityId": "",
        "entityType": "",
        "progarmId": "",
        "solutionId": ""
      }
      
    listImprovementProjectsResponse:
      type: object
      properties:
        result:
            type: string
            example: true
        data:
          type: array
          items:
            type: object
            properties:
              criteriaName:
                type: string 
                example: ""
              level:
                type: string 
                example: ""
              improvementProjects:
                type: array
                items:
                  type: object
                  properties:
                    projectName:
                      type: string 
                      example: ""
                    projectId:
                      type: string 
                      example: ""
                    projectGoal:
                      type: string 
                      example: ""
                    projectExternalId:
                      type: string 
                      example: ""
                      
    assessmentEntityReportResponse:
      type: object
      properties:
        result:
          type: string
          example: true
        programName:
          type: string
          example: ""
        solutionName:
          type: string
          example: ""
        reportSections:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/assessmentEntityResponseReportSection'
            - $ref: '#/components/schemas/assessmentEntityResponseReportSection2'
            
    assessmentEntityResponseReportSection:
      type: object
      properties:
        order:
          type: integer
          example: 1
        chart:
          $ref: '#/components/schemas/assessmentEntityResponseChart'
          
    assessmentEntityResponseChart:
      type: object
      properties:
        type:
          type: string
          example: ""
        title:
          type: string
          example: ""  
        xAxis:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assessmentEntityResponsexAxis'
              - $ref: '#/components/schemas/assessmentEntityResponsexAxis2'
        yAxis:
          type: object
          example: {
            "min": 0,
            "title": {
              "text": ""
            }
          }
        legend:
          type: object
          properties:
            reversed:
              type: string
              example: true
        plotOptions:
          type: object
          properties:
            series:
              type: object
              properties:
                stacking:
                  type: string
                  example: percent
        data:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "Level 1"
              data:
                type: string
                example: []
                
    assessmentEntityResponsexAxis:
      type: object
      properties:
        categories:
          type: string
          example: []
    
    assessmentEntityResponsexAxis2:
      type: object
      properties:
        opposite:
          type: string
          example: true
        reversed:
          type: string
          example: false
        categories:
          type: string
          example: []
        linkedTo: 
          type: string
          example: 0
          
    assessmentEntityResponseReportSection2:
      type: object
      properties:
        order:
          type: integer
          example: 1
        chart:
          $ref: '#/components/schemas/assessmentEntityResponseChart2'
          
    assessmentEntityResponseChart2:
      type: object
      properties:
        type:
          type: string
          example: ""
        title:
          type: string
          example: ""
        heading:
          type: array
          items:
            example: 
              ["Assess. 1","Assess. 2"]
        domains:
          type: array
          items:
            $ref: '#/components/schemas/assessmentEntityResponseChart2Domains'
    
    assessmentEntityResponseChart2Domains:
      type: object
      properties:
        domainName:
          type: string
          example: ""
        criterias:
          type: array
          items:
            properties:
              criteriaName:
                type: string
                example: ""
              levels:
                type: array
                example: []
                
    unnatiPdfReportRequest:
      type: object
      properties:
        title:
          type: string
          example: ""
        goal:
          type: string
          example: ""
        duration:
          type: string
          example: ""
        status:
          type: string
          example: ""
        startDate:
          type: string
          example: ""
        endDate:
          type: string
          example: ""
        category:
          type: array
          items:
            type: string
          example: []
        tasks:
          type: array
          items:
            type: string
          example: []
          
    unnatiPdfReportResponse:
      type: object
      properties:
        status:
          type: string
          example: ""
        message:
          type: string
          example: ""
        pdfUrl:
          type: string
          example: ""
    
    monthlyReportRequest:
      type: object
      properties:
        schoolName:
          type: string
          example: ""
        reportType:
          type: string
          example: ""
        projectDetails:
          type: string
          example: ""
        title:
          type: string
          example: ""
        tasks:
          type: array
          items:
            type: string
          example: []
          
    unnatiViewProjectReportRequest:
      type: object
      properties:
        schoolName:
          type: string
          example: ""
        reportType:
          type: string
          example: ""
        projectDetails:
          type: array
          items:
            type: string
          example: []
          
    addTaskReportRequest:
      type: object
      properties:
        projectName:
          type: string
          example: ""
        goal:
          type: string
          example: ""
        duration:
          type: string
          example: ""
        startDate:
          type: string
          example: ""
        assigneeName:
          type: string
          example: ""
        tasks:
          type: object
          properties:
            title:
              type: string
              example: ""
            endDate:
              type: string
              example: ""
            attachments:
              type: array
              items:
                properties:
                  name:
                    type: string
                    example: ""
                    
    InstanceObservationRequest:
      type: object
      required:
        - submissionId
      properties:
        submissionId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        filter:
          type: object
          properties:
            questionId:
              type: array
              items:
                $ref: ''
              example: ["SA5015-1608719629286"]
    InstanceObservationResponse:
      type: object
      properties:
        entityName: 
          type: string
          example: Sri vidhya vidhai public scool
        observationName: 
          type: string
          example: teacher training 
        observationId:
          type: string
          example: 5bb23d8f3c330302e720e67f
        entityType:
          type: string
          example: school
        entityId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        response:
          type: array
          items:
            $ref: '#/components/schemas/SurveySolutionReportResult'
            
    instanceObservationScoreResult:
      type: object
      properties:
        order:
          type: string
          example: ""
        question:
          type: string
          example: ""
        chart:
          type: object
          properties:
            type:
              type: string
              example: ""
            credits:
              type: object
              properties:
                enabled:
                  type: boolean
                  example: false
            plotOptions:
              type: object
              properties:
                pie:
                  type: object
                  properties:
                    allowPointSelect:
                      type: boolean
                      example: true
                    cursor:
                      type: string
                      example: pointer
                    dataLabels:
                      type: object
                      properties:
                        enabled:
                          type: boolean
                          example: false
                    showInLegend:
                      type: boolean
                      example: true
                    borderColor:
                      type: string
                      example: "#000000"
            data:          
              type: array
              items:
                type: object
                properties:
                  data: 
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/dataArrayinstanceObservationScoreReport'
                        - $ref: '#/components/schemas/dataArrayinstanceObservationScoreReport'
        evidences:
          type: array
          items:
            $ref: '#/components/schemas/EvidenceArray'

    instanceObservationScoreReportResponse:
      type: object
      properties:
        result: 
          type: boolean
          example: true
        totalScore:
          type: string
          example: ""
        scoreAchieved:
          type: string
          example: ""
        observationName:
          type: string
          example: ""
        response:
         type: array
         items:
            $ref: '#/components/schemas/instanceObservationScoreResult'
                          
    dataArrayinstanceObservationScoreReport:
      type: object
      properties:
        name:
          type: string
          example: ""
        y:
          type: string
          example: ""
        color:
          type: string
          example: "#000000" 
    
    entityObservationReportRequest:
      type: object
      properties:
          entityId:
            type: string
            example: 5ce23d8f3c330302e720e6ad
          observationId:
            type: string
            example: 5ba23d8f3c330302e720e6af
          entityType: 
            type: string
            example: school
          filter:
            type: object
            properties: 
              questionId:
                type: array
                items:
                  type: string
                example: ["5ce23d8f3c330302e720e6ad"]
                  
    entityObservationReportResponse:
      type: object
      properties:
        observationId:
          type: string
          example: ""
        observationName:
          type: string
          example: ""
        entityType:
          type: string
          example: ""
        entityId:
          type: string
          example: ""
        entityName:
          type: string
          example: ""
        response:
          type: array
          items:
            type: object
            properties:
                order:
                  type: string
                  example: ""
                question:
                  type: string
                  example: ""
                responseType:
                  type: string
                  example: "" 
                answers:
                  type: string
                  example: "" 
                chart:
                  type: object
                  example: {}
                instanceQuestions:
                  type: array
                  items:
                    type: string
                  example: []
                evidences:
                  type: array
                  items:
                    $ref: '#/components/schemas/EvidenceArray'
                          
    observationEntityReportRequest:
      type: object
      properties:
          entityId:
            type: string
            example: ""
          entityType:
            type: string
            example: ""
          immediateChildEntityType:
            type: string
            example: ""
          observationId:
            type: string
            example: ""
            
    observationEntityReportResponse:
      type: object
      properties:
        solutionId:
          type: string
          example: ""
        solutionName:
          type: string
          example: ""
        entityType:
          type: string
          example: ""
        entityId:
          type: string
          example: ""
        entityName:
          type: string
          example: ""
        response:
          type: array
          items:
            type: object
            properties:
                order:
                  type: string
                  example: ""
                question:
                  type: string
                  example: ""
                responseType:
                  type: string
                  example: "" 
                answers:
                  type: string
                  example: "" 
                chart:
                  type: object
                  example: {}
                instanceQuestions:
                  type: array
                  items:
                    type: string
                  example: []
                  
    entityScoreReportRequest:
      type: object
      properties:
        entityId:
          type: string
          example: ""
        observationId:
          type: string
          example: ""
    EntityScoreReportResult:
      type: object
      properties:
        order:
          type: string
          example: ""
        question:
          type: string
          example: ""                  
        chart:
          type: object
          properties:
            type:
              type: string
              example: "scatter"
            title:
              type: string
              example: "" 
            xAxis:
              type: object
              properties:
                title:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      example: true 
                    text:
                      type: string
                      example: observations
                labels:
                  type: object
                  example: {}
                categories:
                  type: array
                  items:
                    type: string
                  example: ["Obs1", "Obs2", "Obs3", "Obs4", "Obs5"]
                startOnTick:
                  type: boolean
                  example: false 
                endOnTick:
                  type: boolean
                  example: false  
                showLastLabel:    
                  type: boolean
                  example: false  
            yAxis:
              type: object
              properties:
                min:
                  type: string
                  example: 0 
                max:
                  type: string
                  example: ""
                allowDecimals:
                  type: boolean
                  example: false
                title:
                  type: object
                  properties:
                    text:
                      type: string
                      example: Score
            plotOptions:
              type: object
              properties:
                scatter:
                  type: object
                  properties:
                    lineWidth:
                      type: string
                      example: 1 
                    lineColor:
                      type: string
                      example: "#F6B343"
            credits:
              type: object
              properties:
                enabled:
                  type: boolean
                  example: false 
            legend:
              type: object
              properties:
                enabled:
                  type: boolean
                  example: false 
            data:
              type: array
              items:
                type: object
                properties:
                  color:
                    type: string
                    example: "#F6B343"
                  data:
                    type: array
                    example: []
                    items:
                      type: string
          
    entityScoreReportResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        schoolName:
          type: string
          example: ""
        totalObservations:
          type: string
          example: ""
        observationName:
          type: string
          example: ""
        response:
          type: array
          items:
            $ref: '#/components/schemas/EntityScoreReportResult'
                        
    ObservationReportRequest:
      type: object
      required:
        - observationId
      properties:
        observationId:
          type: string
          example: 600984544aa73519117a0f7b
        filter:
          type: object
          properties:
            questionId:
              type: array
              items:
                $ref: ''
              example: ["SA5015-1608719629286"]
    ObservationReport400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: observationId is a required field
    ObservationScoreReportResult:
      type: object
      properties:
        order: 
          type: string
          example:
        question: 
          type: string
          example: 
        chart:
          type: object
          properties:
            type:
              type: string
              example: bar
            title: 
              type: string
              example:
            xAxis:
              type: object
              properties:
                title:
                  type: object
                  properties:
                    text:
                      type: string
                      example:
                labels:
                  type: object
                categories: 
                  type: array
                  items:
                    type: string
            yAxis:
              type: object
              properties:
                min: 
                  type: integer
                  example: 0
                max:
                  type: integer
                  example:
                title:
                  type: object
                  properties:
                    text:
                      type: string
                      example: Score
                labels:
                  type: object
                  properties:
                    overflow:
                      type: string
                      example: justify
                allowDecimals:
                  type: boolean
                  example: false
            plotOptions:
              type: object
              properties:
                bar: 
                  type: object
                  properties:
                    dataLabels:
                      type: object
                      properties:
                        enabled:
                          type: boolean
                          example: true
            legend:
              type: object
              properties:
                enabled:
                  type: boolean
                  example: true 
            credits:
              type: object
              properties:
                enabled:
                  type: boolean
                  example: false 
            data:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: observation1
                  data:
                    type: array
                    items:
                      type: string
            evidences:
              type: array
              items:
                $ref: '#/components/schemas/EvidenceArray'
    ObservationScoreReportResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        solutionName:
          type: string
          example:
        response:
          type: array
          items:
            $ref: '#/components/schemas/ObservationScoreReportResult' 
              
    ListObservationNamesRequest:
      type: object
      required:
        - entityId
        - entityType
      properties:
        entityId:
          type: string
          example: 600984544aa73519117a0f7b
        entityType:
          type: string
          example: school
    ListObservationNamesResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            properties:
              observationId:
                type: string
                example: 600984544aa73519117a0f7b
              observationName:
                type: string
                example: CRO-2019_Qa_Test
    ListObservationNames400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: entityId and entityType are required field
    ListObservationSolutionsResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
            properties:
              solutionId:
                type: string
                example: 600984544aa73519117a0f7b
              solutionName:
                type: string
                example: CRO-2019_Qa_Test
              scoring:
                type: boolean
                example: true
    InstanceCriteriaReportRequest:
      type: object
      required:
        - submissionId
      properties:
        submissionId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        filter:
          type: object
          properties:
            criteria:
              type: array
              items:
                $ref: ''
              example: ["600984544aa73519117a0f7b"]
    InstanceReportByCriteriaResponse:
      type: object
      properties:
        entityName: 
          type: string
          example: Sri vidhya vidhai public scool
        observationName: 
          type: string
          example: teacher training 
        observationId:
          type: string
          example: 5bb23d8f3c330302e720e67f
        entityType:
          type: string
          example: school
        entityId:
          type: string
          example: 5ffd83b545cfa47ab52d760a
        response:
          type: array
          items: 
            type: object
            properties:
              criteriaName:
                type: string
                example: Student attainment class 8 - Math
              criteriaId:
                type: string
                example: 5ce23d8f3c330302e720e6ad
              questionArray:
                type: array
                items:
                  $ref: '#/components/schemas/SurveySolutionReportResult'
    instanceScoreReportByCriteriaResponse:
      type: object
      properties:
        result: 
          type: boolean
          example: true
        totalScore:
          type: integer
          example: 152
        scoreAchieved: 
          type: integer
          example: 148
        observationName:
          type: string
          example: teacher training 
        response:
          type: array
          items: 
            type: object
            properties:
              criteriaName:
                type: string
                example: Student attainment class 8 - Math
              criteriaId:
                type: string
                example: 5ce23d8f3c330302e720e6ad
              questionArray:
                type: array
                items:
                  $ref: '#/components/schemas/instanceObservationScoreResult'
    EntityReportByCriteriaRequest:
      type: object
      required:
       - entityId
       - observationId
      properties:
          entityId:
            type: string
            example: 5ce23d8f3c330302e720e6ad
          observationId:
            type: string
            example: 5ba23d8f3c330302e720e6af
          entityType: 
            type: string
            example: school
          filter:
            type: object
            properties: 
              criteria:
                type: array
                items:
                  type: string
                example: ["5ce23d8f3c330302e720e6ad"]
                
    ObservationQuestionAnswerResponse:
      type: object
      properties:
        order:
          type: string
          example: ""
        question:
          type: string
          example: ""
        responseType:
          type: string
          example: "" 
        answers:
          type: string
          example: "" 
        chart:
          type: object
          example: {}
        instanceQuestions:
          type: array
          items:
            $ref: ''
          example: []
        evidences:
          type: array
          items:
            $ref: '#/components/schemas/EvidenceArray'
    EntityReportByCriteriaResponse:
      type: object
      properties:
        observationId:
          type: string
          example: 5ce23d8f3c330302e720e6ad
        observationName:
          type: string
          example: Classroom observation
        entityType:
          type: string
          example: school
        entityId:
          type: string
          example: 5ce23d8f3c330302e720e6ad
        entityName:
          type: string
          example: Sri vidhya vikas public school
        response:
          type: array
          items:
            type: object
            properties:
              criteriaName:
                type: string
                example: Student attainment class 8 - Math
              criteriaId:
                type: string
                example: 5ce23d8f3c330302e720e6ad
              questionArray:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationQuestionAnswerResponse'
    EntityReportByCriteria400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: entityId and observationId are required field
    EntityScoreReportByCriteriaResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        schoolName:
          type: string
          example: ""
        totalObservations:
          type: string
          example: ""
        observationName:
          type: string
          example: ""
        response:
          type: array
          items:
            type: object
            properties:
              criteriaName:
                type: string
                example: Student attainment class 8 - Math
              criteriaId:
                type: string
                example: 5ce23d8f3c330302e720e6ad
              questionArray:
                type: array
                items:
                  $ref: '#/components/schemas/EntityScoreReportResult'
    ObservationReportByCriteriaRequest:
      type: object
      required:
        - observationId
      properties:
        observationId:
          type: string
          example: 600984544aa73519117a0f7b
        filter:
          type: object
          properties:
            criteria:
              type: array
              items:
                $ref: ''
              example: ["5ce23d8f3c330302e720e6ad"]
    ObservationReportByCriteriaResponse:
      type: object
      properties:
        observationId:
          type: string
          example: ""
        observationName:
          type: string
          example: ""
        entityType:
          type: string
          example: ""
        entityId:
          type: string
          example: ""
        entityName:
          type: string
          example: ""
        response:
          type: array
          items:
            type: object
            properties:
              criteriaName:
                type: string
                example: Student attainment class 8 - Math
              criteriaId:
                type: string
                example: 5ce23d8f3c330302e720e6ad
              questionArray:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationQuestionAnswerResponse'
    observationScoreReportByCriteriaResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        solutionName:
          type: string
          example: Classroom observation form
        response:
          type: array
          items:
            type: object
            properties:
              criteriaName:
                type: string
                example: Student attainment class 8 - Math
              criteriaId:
                type: string
                example: 5ce23d8f3c330302e720e6ad
              questionArray:
                type: array
                items:
                  $ref: '#/components/schemas/ObservationScoreReportResult'
    ObservationListAllEvidenceRequest:
      type: object
      properties:
        submissionId:
          type: string
          example: 5efc83b545cfa47ab52d7608
        entityId:
          type: string
          example: 5ffd83b545cfa47ab52d7609
        observationId:
          type: string
          example: 5fdb83b545cfa47ab52d7601
        questionId:
          type: string
          example: SA5015-1608719629286
    ListAllEvidencesResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        data:
          type: array
          items: 
            type: object
            properties:
              images:
                type: array
                items:
                  $ref: '#/components/schemas/EvidenceArray'
              videos:
                type: array
                items:
                  $ref: '#/components/schemas/EvidenceArray'
              documents:
                type: array
                items:
                  $ref: '#/components/schemas/EvidenceArray'
              remars:
                type: array
                items:
                  type: string
                example: [""]
    ObservationListAllEvidence400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: questionId and submissionId or entityId and observationId or observationId are required fields
    SubmissionCountRequest:
      type: object
      properties:
        entityId:
          type: string
          example: 5efc83b545cfa47ab52d7608
        observationId:
          type: string
          example: 5cac83b545cfa47ab52d7789
    SubmissionCountResponse:
      type: object
      properties:
        result:
          type: boolean
          example: true
        data:
          type: object
          properties:
            noOfSubmissions:
              type: integer
              example: 4
    SubmissionCount400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: entityId and observation or only observationId are required fields.
    ObservationPdfReports400Error:
      type: object
      properties:
        status:
          type: string
          example: failure
        message:
          type: string
          example: Invalid input.
    ObservationPdfReportRequest:
      type: object
      properties:
        submissionId:
          type: string
          example: 5efc83b545cfa47ab52d7608
    EntityObservationSolutionReportResponse:
      type: object
      properties:
        solutionId:
          type: string
          example: ""
        solutionName:
          type: string
          example: ""
        entityType:
          type: string
          example: ""
        entityId:
          type: string
          example: ""
        entityName:
          type: string
          example: ""
        response:
          type: array
          items:
            type: object
            properties:
                order:
                  type: string
                  example: ""
                question:
                  type: string
                  example: ""
                responseType:
                  type: string
                  example: "" 
                answers:
                  type: string
                  example: "" 
                chart:
                  type: object
                  example: {}
                instanceQuestions:
                  type: array
                  items:
                    type: string
                  example: []
                evidences:
                  type: array
                  items:
                    $ref: '#/components/schemas/EvidenceArray'
    EntityObservationSolutionReportRequest:
      type: object
      required:
        - entityId
        - entityType
        - solutionId
      properties:
        entityId:
          type: string
          example: 5efc83b545cfa47ab52d7608
        entityType:
          type: string
          example: cluster
        immediateChildEntityType: 
          type: string
          example: school
        solutionId:
          type: string
          example: 5efc83b545cfa47ab52d7608
    EntitySolutionReport400Error:
      type: object
      properties:
        result:
          type: boolean
          example: false
        message:
          type: string
          example: entityId, entityType, immediateChildEntityType and solutionId required fields
    
     
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header    
      








